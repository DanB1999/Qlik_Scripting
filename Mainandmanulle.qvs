SET ThousandSep='.';
SET DecimalSep=',';
SET MoneyThousandSep='.';
SET MoneyDecimalSep=',';
SET MoneyFormat='#.##0,00 €;-#.##0,00 €';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD.MM.YYYY';
SET TimestampFormat='DD.MM.YYYY hh:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=1;
SET CollationLocale='de-DE';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan.;Feb.;März;Apr.;Mai;Juni;Juli;Aug.;Sep.;Okt.;Nov.;Dez.';
SET LongMonthNames='Januar;Februar;März;April;Mai;Juni;Juli;August;September;Oktober;November;Dezember';
SET DayNames='Mo.;Di.;Mi.;Do.;Fr.;Sa.;So.';
SET LongDayNames='Montag;Dienstag;Mittwoch;Donnerstag;Freitag;Samstag;Sonntag';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

LET vDateTerminStart= Date(Today() - 90);  // 17.08.2022
LET vDateTerminEnde= Date(Today() + 90);	// 17.08.2022


LET vDateTerminForeCastStart= Date(Today());
LET vDateTerminForeCastEnde= Date(Today()+7);
LET vMaxYear = Year(Today());

LET v12MonatZuruck = Date(AddMonths(date(Today(),'YYYY-MM-DD'), -12),'YYYY-MM-DD');
LET v12MonatZuruck.US = Date(AddMonths(date(Today(),'YYYY-MM-DD'), -12),'YYYY.MM.DD');
LET v12MonatZuruck.DE = Date(AddMonths(date(Today(),'YYYY-MM-DD'), -12),'DD.MM.YYYY');
LET v6MonatZuruck = Date(AddMonths(date(Today(),'DD.MM.YYYY'), -6),'DD.MM.YYYY');
LET v3MonatZuruck = Date(AddMonths(date(Today(),'DD.MM.YYYY'), -3),'DD.MM.YYYY');
Let v3MonatZuruckUS = Date(AddMonths(date(Today(),'YYYY-MM-DD'), -3),'YYYY-MM-DD');


LET v3MonatZukunftUS = Date(AddMonths(date(Today(),'YYYY-MM-DD'), +3),'YYYY-MM-DD');
LET v3MonatZukunft = Date(AddMonths(date(Today(),'DD.MM.YYYY'), +3),'DD.MM.YYYY');
LET v6MonatZukunftUS = Date(AddMonths(date(Today(),'YYYY-MM-DD'), +6),'YYYY-MM-DD');
LET v6MonatZukunft = Date(AddMonths(date(Today(),'DD.MM.YYYY'), +6),'DD.MM.YYYY');
LET v12MonatZukunftUS = Date(AddMonths(date(Today(),'YYYY-MM-DD'), +12),'YYYY-MM-DD');
LET v12MonatZukunft = Date(AddMonths(date(Today(),'DD.MM.YYYY'), +12),'DD.MM.YYYY');

Let vPreloadZaehler = 0; //Preloadzaehler für where exists

LET vpfadname ='lib://QVD (vnppbw1wt201_qsadmin)/_Processed_Data/';
LET vpfadname_main ='lib://QVD (vnppbw1wt201_qsadmin)/';


Let vToday = Date(Today());
Let vYesterday = Date(Today() -1);
Let vMonatsende = Monthend(Today());



Let vMonthBerichtsdatum=Date(Today() );
//Let vMonthBerichtsdatum=Date(Today() - 40);							// Für 2022 Datei einstellungen Emre 
//Let vWeekBerichtsdatum=Date(Today() - 7);
Let vMonthReportJahr=(Year('$(vMonthBerichtsdatum)'));
Let vMonthReportVorJahr=(Year('$(vMonthBerichtsdatum)') - 1);
Let vMonthReportVorJahrend=YearEnd(('$(vMonthBerichtsdatum)');

Let vMonthReportVor2Jahr=(Year('$(vMonthBerichtsdatum)') - 2);

Let vMonthReportMonat =num(Month('$(vMonthBerichtsdatum)'));
Let vMonthReportvorMonat =(num(Month('$(vMonthBerichtsdatum)'))-1);
Let vMonthReportvor2Monat =(num(Month('$(vMonthBerichtsdatum)'))-2);
Let vMonthReportvor3Monat =(num(Month('$(vMonthBerichtsdatum)'))-3);
Let vMonthReportvor4Monat =(num(Month('$(vMonthBerichtsdatum)'))-4);

Let vMonthReportMonat.date =(Month('$(vMonthBerichtsdatum)'));
Let vMonthReportvorMonat.date =Month(addmonths('$(vMonthBerichtsdatum)',-1));
Let vMonthReportvor2Monat.date =Month(addmonths('$(vMonthBerichtsdatum)',-2));
Let vMonthReportvor3Monat.date =Month(addmonths('$(vMonthBerichtsdatum)',-3));
Let vMonthReportvor4Monat.date =Month(addmonths('$(vMonthBerichtsdatum)',-4));

Let vMonthReportWoche = num(Week('$(vMonthBerichtsdatum)'));
Let vMonthReportVorWoche = (num(Week('$(vMonthBerichtsdatum)'))-1);
Let vMonthReportVor2Woche = (num(Week('$(vMonthBerichtsdatum)'))-2);
Let vMonthReportVor3Woche = (num(Week('$(vMonthBerichtsdatum)'))-3);
Let vMonthReportVor4Woche = (num(Week('$(vMonthBerichtsdatum)'))-4);

Let vMonthReportZukunftWoche = (num(Week('$(vMonthBerichtsdatum)'))+1);
Let vMonthReportZukunft2Woche = (num(Week('$(vMonthBerichtsdatum)'))+2);
Let vMonthReportZukunft3Woche = (num(Week('$(vMonthBerichtsdatum)'))+3);
Let vMonthReportZukunft4Woche = (num(Week('$(vMonthBerichtsdatum)'))+4);


Let vMonthReportQuartal = 'Q'&(ceil(num(Month('$(vMonthBerichtsdatum)'/3)));
Let vMonthReportvorQuartal = 'Q'&(ceil(num(Month('$(vMonthBerichtsdatum)'/3))-1);
Let vMonthReportvor2Quartal = 'Q'&(ceil(num(Month('$(vMonthBerichtsdatum)'/3))-2);

Let vMonthReportJahrtoMnt = (Year('$(vMonthBerichtsdatum)')) & '-'& num(Month('$(vMonthBerichtsdatum)'));
Let vMonthReportJahrtoHj = (Year('$(vMonthBerichtsdatum)')) & '-'& (ceil(Month('$(vMonthBerichtsdatum)'/3));
Let vMonthReportJahrtoQ = (Year('$(vMonthBerichtsdatum)')) & '-'& (ceil(Month('$(vMonthBerichtsdatum)'/3));

Let vzMonthBack =num(month(today()))-1;
Let vzMonthBackMDD = num(month(today()))+1;


//Manulle datie fängt here

Trace This ist the manulle part;

[IND.DZC.IST]:
LOAD
    
     AutoNumberHash256(
     if(num(Beraternummer)=0 OR isnull(num(Beraternummer))or len(num(Beraternummer))=0,'84002',num(Beraternummer)),
     year(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY')), 
     Month(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY'))) 
     as  ANH#Kundenberater#Join,  //PK Manuelle Datei DZC
     
    
    
    AutoNumberHash256(Beraternummer) as  DZC.IST.Beraternummer,  
    
    
    
//     "Aggregationsmerkmal 1" as DZC.IST.Aggregationsmerkmal.1, 
//     "Aggregationsmerkmal 2" as DZC.IST.Aggregationsmerkmal.2, 
//     Teilmarkt as DZC.IST.Teilmarkt, 
//     Datenstand as DZC.IST.Datenstand, 
    date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY') as DZC.IST.Datenstand,
    year(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY')) as DZC.IST.Datenstand.Jahr,
    Month(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY')) as DZC.IST.Datenstand.Monat,

	Monthend(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY')) as DZC.IST.Datenstand.Monthend,
    yearend(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY')) as DZC.IST.Datenstand.Jahrend,

//     Erstellungsdatum as DZC.IST.Erstellungsdatum, 
//     "Ertrag WP Gesamt (ohne IHS)" as DZC.IST.Ertrag.WP.Gesamt.ohne.IHS, 
//     "Ertrag WP Gesamt Kauf (ohne IHS)" as DZC.IST.Ertrag.WP.Gesamt.Kauf.ohne.IHS, 
//     "Ertrag WP Gesamt Verkauf (ohne IHS)" as DZC.IST.Ertrag.WP.Gesamt.Verkauf.ohne.IHS, 
//     "Ertrag WP Gesamt Bestand" as DZC.IST.Ertrag.WP.Gesamt.Bestand, 
    "Ertrag Anlagezertifikate Gesamt" as DZC.IST.Ertrag.Anlagezertifikate.Gesamt, 
//     "Ertrag Anlagezertifikate Kauf" as DZC.IST.Ertrag.Anlagezertifikate.Kauf, 
//     "davon Ertrag Anlagezertifikate nicht abgerechnet" as DZC.IST.davon.Ertrag.Anlagezertifikate.nicht.abgerechnet, 
//     "Ertrag Anlagezertifikate Verkauf" as DZC.IST.Ertrag.Anlagezertifikate.Verkauf, 
//     "Ertrag Anlagezertifikate Bestand" as DZC.IST.Ertrag.Anlagezertifikate.Bestand, 
    "Ertrag Zinsprodukte Gesamt" as DZC.IST.Ertrag.Zinsprodukte.Gesamt, 
//     "Ertrag Zinsprodukte Kauf" as DZC.IST.Ertrag.Zinsprodukte.Kauf, 
// //     "Ertrag Zinsprodukte Verkauf" as DZC.IST.Ertrag.Zinsprodukte.Verkauf, 
    "Ertrag Aktien Gesamt" as DZC.IST.Ertrag.Aktien.Gesamt, 
//     "Ertrag Aktien Kauf" as DZC.IST.Ertrag.Aktien.Kauf, 
//     "Ertrag Aktien Verkauf" as DZC.IST.Ertrag.Aktien.Verkauf, 
    "Ertrag Depotgebühren" as DZC.IST.Ertrag.Depotgebühren, 
    "Ertrag Fonds Gesamt" as DZC.IST.Ertrag.Fonds.Gesamt, 
//     "Ertrag Fonds Kauf" as DZC.IST.Ertrag.Fonds.Kauf, 
//     "Ertrag Fonds Verkauf" as DZC.IST.Ertrag.Fonds.Verkauf, 
//     "Ertrag Fonds Bestand" as DZC.IST.Ertrag.Fonds.Bestand, 
    "Ertrag Vermögensverwaltung Gesamt" as DZC.IST.Ertrag.Vermögensverwaltung.Gesamt, 
//     "Ertrag Vermögensverwaltung Kauf" as DZC.IST.Ertrag.Vermögensverwaltung.Kauf, 
//     "Ertrag Vermögensverwaltung Bestand" as DZC.IST.Ertrag.Vermögensverwaltung.Bestand, 
//     "Ertrag Sonstige Gesamt" as DZC.IST.Ertrag.Sonstige.Gesamt, 
//     "Ertrag Sonstige Kauf" as DZC.IST.Ertrag.Sonstige.Kauf, 
//     "Ertrag Sonstige Bestand" as DZC.IST.Ertrag.Sonstige.Bestand, 
//     "Anteil Kontaktertrag" as DZC.IST.Anteil.Kontaktertrag, 
//     "Kauf WP Gesamt (ohne IHS)" as DZC.IST.Kauf.WP.Gesamt.ohne.IHS, 
//     "Verkauf WP Gesamt (ohne IHS)" as DZC.IST.Verkauf.WP.Gesamt.ohne.IHS, 
//     "Fälligkeiten WP Gesamt (ohne IHS)" as DZC.IST.Fälligkeiten.WP.Gesamt.ohne.IHS, 
//     "Nettoabsatz WP Gesamt (ohne IHS)" as DZC.IST.Nettoabsatz.WP.Gesamt.ohne.IHS, 
    "Kauf Anlagezertifikate" as DZC.IST.Kauf.Anlagezertifikate, 
//     "davon Kauf Anlagezertifikate nicht abgerechnet" as DZC.IST.davon.Kauf.Anlagezertifikate.nicht.abgerechnet, 
//     "davon Kauf Anlagezertifikate VV" as DZC.IST.davon.Kauf.Anlagezertifikate.VV, 
//     "Anzahl Abrechnungen Kauf Anlagezertifikate" as DZC.IST.Anzahl.Abrechnungen.Kauf.Anlagezertifikate, 
//     "Verkauf Anlagezertifikate" as DZC.IST.Verkauf.Anlagezertifikate, 
     "Fälligkeiten Anlagezertifikate" as DZC.IST.Fälligkeiten.Anlagezertifikate, 
    "Nettoabsatz DZ BANK Anlagezertifikate" as DZC.IST.Nettoabsatz.DZ.BANK.Anlagezertifikate, 
     "Kauf Zinsprodukte" as DZC.IST.Kauf.Zinsprodukte, 
//     "davon Kauf Zinsprodukte VV" as DZC.IST.davon.Kauf.Zinsprodukte.VV, 
//     "Anzahl Abrechnungen Kauf Zinsprodukte" as DZC.IST.Anzahl.Abrechnungen.Kauf.Zinsprodukte, 
//     "Verkauf Zinsprodukte" as DZC.IST.Verkauf.Zinsprodukte, 
//     "Fälligkeiten Zinsprodukte" as DZC.IST.Fälligkeiten.Zinsprodukte, 
    "Nettoabsatz Zinsprodukte" as DZC.IST.Nettoabsatz.Zinsprodukte, 
     "Kauf Aktien" as DZC.IST.Kauf.Aktien, 
//     "davon Kauf Aktien VV" as DZC.IST.davon.Kauf.Aktien.VV, 
//     "Anzahl Abrechnungen Kauf Aktien" as DZC.IST.Anzahl.Abrechnungen.Kauf.Aktien, 
//     "Verkauf Aktien" as DZC.IST.Verkauf.Aktien, 
//     "Fälligkeiten Aktien" as DZC.IST.Fälligkeiten.Aktien, 
     "Nettoabsatz Aktien" as DZC.IST.Nettoabsatz.Aktien, 
//     "Kauf Fonds" as DZC.IST.Kauf.Fonds, 
//     "davon Kauf Fonds VV" as DZC.IST.davon.Kauf.Fonds.VV, 
//     "Verkauf Fonds" as DZC.IST.Verkauf.Fonds, 
//     "Nettoabsatz Fonds" as DZC.IST.Nettoabsatz.Fonds, 
    "Kauf Vermögensverwaltung" as DZC.IST.Kauf.Vermögensverwaltung, 
//     "Verkauf Vermögensverwaltung" as DZC.IST.Verkauf.Vermögensverwaltung, 
    "Nettoabsatz Vermögensverwaltung" as DZC.IST.Nettoabsatz.Vermögensverwaltung, 
//     "Kauf IHS" as DZC.IST.Kauf.IHS, 
//     "Anzahl Abrechnungen Kauf IHS" as DZC.IST.Anzahl.Abrechnungen.Kauf.IHS, 
//     "Verkauf IHS" as DZC.IST.Verkauf.IHS, 
//     "Fälligkeiten IHS" as DZC.IST.Fälligkeiten.IHS, 
//     "Nettoabsatz IHS" as DZC.IST.Nettoabsatz.IHS, 
//     "Nettozufluss Einlagen" as DZC.IST.Nettozufluss.Einlagen, 
//     "Bestand WP Gesamt (ohne IHS+Einlagen)" as DZC.IST.Bestand.WP.Gesamt.ohne.IHS.Einlagen, 
//     "Bestand Anlagezertifikate" as DZC.IST.Bestand.Anlagezertifikate, 
//     "Bestand Zinsprodukte" as DZC.IST.Bestand.Zinsprodukte, 
//     "Bestand Aktien" as DZC.IST.Bestand.Aktien, 
//     "Bestand Fonds" as DZC.IST.Bestand.Fonds, 
//     "Bestand Vermögensverwaltung" as DZC.IST.Bestand.Vermögensverwaltung, 
//     "Bestand IHS" as DZC.IST.Bestand.IHS, 
//     "Bestand Einlagen" as DZC.IST.Bestand.Einlagen, 
    "Anzahl Depots Depot-B Gesamt" as DZC.IST.Anzahl.Depots.Depot.B.Gesamt, 
//     "davon konservativ" as DZC.IST.davon.konservativ, 
//     "davon risikoscheu" as DZC.IST.davon.risikoscheu, 
//     "davon riskobereit" as DZC.IST.davon.riskobereit, 
//     "davon spekulativ" as DZC.IST.davon.spekulativ, 
//     "davon hochspekulativ" as DZC.IST.davon.hochspekulativ, 
//     "davon ohne Zuordnung" as DZC.IST.davon.ohne.Zuordnung, 
//     "Anzahl Depots mit Anlagezertifikaten" as DZC.IST.Anzahl.Depots.mit.Anlagezertifikaten, 
//     "Anteil Depots mit Anlagezertifikaten" as DZC.IST.Anteil.Depots.mit.Anlagezertifikaten, 
//     Beratungsquote as DZC.IST.Beratungsquote, 
//     Onlinequote as DZC.IST.Onlinequote, 
//     "Kauf Depot-B Gesamt" as DZC.IST.Kauf.Depot.B.Gesamt, 
//     "Verkauf Depot-B Gesamt" as DZC.IST.Verkauf.Depot.B.Gesamt, 
//     "Anzahl Abrechnungen Kauf Depot-B Gesamt" as DZC.IST.Anzahl.Abrechnungen.Kauf.Depot.B.Gesamt, 
//     "Anzahl Abrechnungen Verkauf Depot-B Gesamt" as DZC.IST.Anzahl.Abrechnungen.Verkauf.Depot.B.Gesamt, 
//     "Ertrag Kauf Depot-B Gesamt" as DZC.IST.Ertrag.Kauf.Depot.B.Gesamt, 
//     "Ertrag Verkauf Depot-B Gesamt" as DZC.IST.Ertrag.Verkauf.Depot.B.Gesamt, 
//     "Kauf mit Beratung" as DZC.IST.Kauf.mit.Beratung, 
//     "Verkauf mit Beratung" as DZC.IST.Verkauf.mit.Beratung, 
//     "Anzahl Abrechnungen Kauf mit Beratung" as DZC.IST.Anzahl.Abrechnungen.Kauf.mit.Beratung, 
//     "Anzahl Abrechnungen Verkauf mit Beratung" as DZC.IST.Anzahl.Abrechnungen.Verkauf.mit.Beratung, 
//     "Ertrag Kauf mit Beratung" as DZC.IST.Ertrag.Kauf.mit.Beratung, 
//     "Ertrag Verkauf mit Beratung" as DZC.IST.Ertrag.Verkauf.mit.Beratung, 
    "Kauf Vermögensverwaltung1" as DZC.IST.Kauf.Vermögensverwaltung1, 
//     "Verkauf Vermögensverwaltung1" as DZC.IST.Verkauf.Vermögensverwaltung1, 
//     "Anzahl Abrechnungen Kauf Vermögensverwaltung" as DZC.IST.Anzahl.Abrechnungen.Kauf.Vermögensverwaltung, 
//     "Anzahl Abrechnungen Verkauf Vermögensverwaltung" as DZC.IST.Anzahl.Abrechnungen.Verkauf.Vermögensverwaltung, 
//     "Ertrag Kauf Vermögensverwaltung" as DZC.IST.Ertrag.Kauf.Vermögensverwaltung, 
//     "Ertrag Verkauf Vermögensverwaltung" as DZC.IST.Ertrag.Verkauf.Vermögensverwaltung, 
//     "Kauf ohne Beratung" as DZC.IST.Kauf.ohne.Beratung, 
//     "Verkauf ohne Beratung" as DZC.IST.Verkauf.ohne.Beratung, 
//     "Anzahl Abrechnungen Kauf ohne Beratung" as DZC.IST.Anzahl.Abrechnungen.Kauf.ohne.Beratung, 
//     "Anzahl Abrechnungen Verkauf ohne Beratung" as DZC.IST.Anzahl.Abrechnungen.Verkauf.ohne.Beratung, 
//     "Ertrag Kauf ohne Beratung" as DZC.IST.Ertrag.Kauf.ohne.Beratung, 
//     "Ertrag Verkauf ohne Beratung" as DZC.IST.Ertrag.Verkauf.ohne.Beratung, 
//     "Kauf Internet" as DZC.IST.Kauf.Internet, 
//     "Verkauf Internet" as DZC.IST.Verkauf.Internet, 
//     "Anzahl Abrechnungen Kauf Internet" as DZC.IST.Anzahl.Abrechnungen.Kauf.Internet, 
//     "Anzahl Abrechnungen Verkauf Internet" as DZC.IST.Anzahl.Abrechnungen.Verkauf.Internet, 
//     "Ertrag Kauf Internet" as DZC.IST.Ertrag.Kauf.Internet, 
//     "Ertrag Verkauf Internet" as DZC.IST.Ertrag.Verkauf.Internet, 
//     "Anzahl inaktive Depots (0 Umsätze)" as DZC.IST.Anzahl.inaktive.Depots.0.Umsätze, 
//     "Anzahl Depots 1-2 Umsätze" as DZC.IST.Anzahl.Depots.1.2.Umsätze, 
//     "Anzahl Depots 3-7 Umsätze" as DZC.IST.Anzahl.Depots.3.7.Umsätze, 
//     "Anzahl Depots > 7 Umsätze" as DZC.IST.Anzahl.Depots.großer.als.7.Umsätze, 
//     "Anteil inaktive Depots" as DZC.IST.Anteil.inaktive.Depots, 
//     "Wiederanlagequote Anlagezertifikate" as DZC.IST.Wiederanlagequote.Anlagezertifikate, 
    "Kauf Anlagezertifikate Index/Korb" as DZC.IST.Kauf.Anlagezertifikate.Index.Korb, 
    "Kauf Anlagezertifikate Einzelwert" as DZC.IST.Kauf.Anlagezertifikate.Einzelwert, 
    "Kauf Anlagezertifikate Sonstige" as DZC.IST.Kauf.Anlagezertifikate.Sonstige, 
//     "Ertrag Kauf Anlagezertifikate Index/Korb" as DZC.IST.Ertrag.Kauf.Anlagezertifikate.Index.Korb, 
//     "Ertrag Kauf Anlagezertifikate Einzelwert" as DZC.IST.Ertrag.Kauf.Anlagezertifikate.Einzelwert, 
//     "Ertrag Kauf Anlagezertifikate Sonstige" as DZC.IST.Ertrag.Kauf.Anlagezertifikate.Sonstige, 
//     "Bestand Anlagezertifikate Index/Korb" as DZC.IST.Bestand.Anlagezertifikate.Index.Korb, 
//     "Bestand Anlagezertifikate Einzelwert" as DZC.IST.Bestand.Anlagezertifikate.Einzelwert, 
//     "Bestand Anlagezertifikate Sonstige" as DZC.IST.Bestand.Anlagezertifikate.Sonstige, 
//     "Nettoabsatz Anlagezertifikate Index/Korb" as DZC.IST.Nettoabsatz.Anlagezertifikate.Index.Korb, 
//     "Nettoabsatz Anlagezertifikate Einzelwert" as DZC.IST.Nettoabsatz.Anlagezertifikate.Einzelwert, 
//     "Nettoabsatz Anlagezertifikate Sonstige" as DZC.IST.Nettoabsatz.Anlagezertifikate.Sonstige, 
//     "Kauf Aktienanleihen mit Zeichung" as DZC.IST.Kauf.Aktienanleihen.mit.Zeichung, 
//     "Ertrag Aktienanleihen mit Zeichung" as DZC.IST.Ertrag.Aktienanleihen.mit.Zeichung, 
//     "Bestand Aktienanleihen mit Zeichung" as DZC.IST.Bestand.Aktienanleihen.mit.Zeichung, 
//     "Nettoabsatz Aktienanleihen mit Zeichung" as DZC.IST.Nettoabsatz.Aktienanleihen.mit.Zeichung, 
//     "Zufluss Eigene VV" as DZC.IST.Zufluss.Eigene.VV, 
//     "Zufluss DZ PRIVATBANK" as DZC.IST.Zufluss.DZ.PRIVATBANK, 
//     "Zufluss Fremde VV" as DZC.IST.Zufluss.Fremde.VV, 
//     "Ertrag Eigene VV" as DZC.IST.Ertrag.Eigene.VV, 
//     "Ertrag DZ PRIVATBANK" as DZC.IST.Ertrag.DZ.PRIVATBANK, 
//     "Ertrag Fremde VV" as DZC.IST.Ertrag.Fremde.VV, 
    "Anzahl Union Stammdepots" as DZC.IST.Anzahl.Union.Stammdepots, 
    "Neue Depot-B Depots seit 01.01." as DZC.IST.Neue.Depot.B.Depots.seit.01.01., 
    "Neue Union Stammdepots seit 01.01." as DZC.IST.Neue.Union.Stammdepots.seit.01.01	


FROM [lib://QVD (vnppbw1wt201_qsadmin)/_Processed_Data/IND_CUI_BERATERDATEI.qvd]
(qvd);



DZC.IST.Jahresende:
load 
   		AutoNumberHash256(num(DZC.IST.Beraternummer))  as ##STM.ORGA1#DZC.IST.Jahrend,
// 	 	AutoNumberHash256(DZC.IST.Beraternummer, year(monthend(addmonths(DZC.IST.Datenstand.Monthend,+1))),  Month(monthend(addmonths(DZC.IST.Datenstand.Monthend,+1))) )  as ##STM.ORGA1#DZC.IST.Jahrend,
//         addmonths(DZC.IST.Datenstand.Monthend,+1) as DZC.IST.Jahrend.Datenstand.Monthend,
        DZC.IST.Datenstand.Jahrend AS DZC.IST.Jahrend.Datenstand.Jahrend,
        AutoNumberHash256(DZC.IST.Beraternummer) as DZC.IST.Jahrend.Beraternummer,
        DZC.IST.Anzahl.Depots.Depot.B.Gesamt as DZC.IST.Jahrend.Anzahl.Depots.Depot.B.Gesamt,
        DZC.IST.Datenstand.Jahr as DZC.IST.Jahrend.Datenstand.Jahr,
        DZC.IST.Anzahl.Union.Stammdepots as DZC.IST.Jahrend.Anzahl.Union.Stammdepots
        
    resident IND.DZC.IST
    where DZC.IST.Datenstand.Monthend=DZC.IST.Datenstand.Jahrend and DZC.IST.Datenstand.Jahr='$(vMonthReportVorJahr)';




[IND.DZCF]:
LOAD

     AutoNumberHash256(
     if(num(Beraternummer)=0 OR isnull(num(Beraternummer))or len(num(Beraternummer))=0,'84002',num(Beraternummer)),
     year(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY')), 
     Month(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY'))) 
     as  ANH#Kundenberater#Join,  //PK Manuelle Datei DZC
    
    
    
     AutoNumberHash256(if(num(Beraternummer)=0 or isnull(Beraternummer),'84002',num(Beraternummer))) as  IND.DZCF.Beraternummer,
    
    
//     "Aggregationsmerkmal 1" as IND.DZCF.Aggregationsmerkmal.1,
//     "Aggregationsmerkmal 2" as IND.DZCF.Aggregationsmerkmal.2,
//     Teilmarkt as IND.DZCF.Teilmarkt,
    //Datenstand as IND.DZCFD.Datenstand,
    monthend(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY')) as IND.DZCF.IST.Datenstand.MonthEnd,
    yearend(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY')) as IND.DZCF.IST.Datenstand.Jahrend,
    date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY') as IND.DZCF.IST.Datenstand,
//     year(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY')) as IND.DZCF.IST.Datenstand.Jahr,
//     Month(date(alt(Datenstand, Date#(Datenstand, 'YYYY-MM-DD'), Date#(Datenstand, 'MM-DD-YYYY'), Date#(Datenstand, 'DD/MM/YYYY'), Date#(Datenstand, 'MM/DD/YYYY')), 'DD.MM.YYYY')) as IND.DZCF.IST.Datenstand.Monat,
//     Erstellungsdatum as IND.DZCF.Erstellungsdatum,
//     "Bruttoabsatz Aktienfonds Load" as IND.DZCF.Bruttoabsatz.Aktienfonds.Load,
//     "Bruttoabsatz Aktienfonds No Load" as IND.DZCF.Bruttoabsatz.Aktienfonds.No.Load,
//     "Bruttoabsatz Bankindividuelle Fondsgruppen Gesamt" as IND.DZCF.Bruttoabsatz.Bankindividuelle.Fondsgruppe.gesamt,
    "Bruttoabsatz Drittfonds (attrax)" or "Bruttoabsatz DrittFonds" as IND.DZCF.Bruttoabsatz.Drittfonds.OR.attrax,
    "Bruttoabsatz DrittFonds" as IND.DZCF.Bruttoabsatz.Drittfonds.attrax,

    
//     "Bruttoabsatz ELTIF" as IND.DZCF.Bruttoabsatz.ELTIF,
//     "Bruttoabsatz FK-/institutionelle Publikumsfonds" as IND.DZCF.Bruttoabsatz.FK.institutionelle.Publikumsfonds,
//     "Bruttoabsatz Fondsgebundene Versicherungen" as IND.DZCF.Bruttoabsatz.Fondsgebundene.Versicherungen,
//     "Bruttoabsatz FremdFonds" as IND.DZCF.Bruttoabsatz.FremdFonds,
//     "Bruttoabsatz Geldmarktfonds" as IND.DZCF.Bruttoabsatz.Geldmarktfonds,
//     "Bruttoabsatz Immobilienfonds" as IND.DZCF.Bruttoabsatz.Immobilienfonds,
//     "Bruttoabsatz MeinInvest" as IND.DZCF.Bruttoabsatz.MeinInvest,
//     "Bruttoabsatz Mischfonds / Sonstige Load" as IND.DZCF.Bruttoabsatz.Mischfonds.Sonstige.Load,
//     "Bruttoabsatz Mischfonds / Sonstige No Load" as IND.DZCF.Bruttoabsatz.Mischfonds.Sonstige.No.Load,
//     "Bruttoabsatz Private Label Fonds Load" as IND.DZCF.Bruttoabsatz.Private.Label.Fonds.Load,
//     "Bruttoabsatz Private Label Fonds No Load" as IND.DZCF.Bruttoabsatz.Private.Label.Fonds.No.Load,
//     "Bruttoabsatz PrivatFonds" as IND.DZCF.Bruttoabsatz.PrivatFonds,
//     "Bruttoabsatz Rentenfonds Load" as IND.DZCF.Bruttoabsatz.Rentenfonds.Load,
//     "Bruttoabsatz Rentenfonds No Load" as IND.DZCF.Bruttoabsatz.Rentenfonds.No.Load,
//     "Bruttoabsatz UniProfiRente / UniProfiRente Select" as IND.DZCF.Bruttoabsatz.UniProfiRente.UniProfiRente.Select,
//     "Bruttoabsatz VermögenPlus/FirmenkundenInvest VVL" as IND.DZCF.Bruttoabsatz.VermögenPlus.FirmenkundenInvest.VVL,
//     "Bruttoabsatz Wertgesicherte Fonds Load" as IND.DZCF.Bruttoabsatz.Wertgesicherte.Fonds.Load,
//     "Bruttoabsatz Wertgesicherte Fonds No Load" as IND.DZCF.Bruttoabsatz.Wertgesicherte.Fonds.No.Load,
//     "Bruttoabsatz Sparpläne (Absatz)" as IND.DZCF.Bruttoabsatz.Sparpläne.Absatz,
//     "Bruttoabsatz VV Depot-B" as IND.DZCF.Bruttoabsatz.VV.Depot.B,
//     "Nettoabsatz Aktienfonds Load" as IND.DZCF.Nettoabsatz.Aktienfonds.Load,
//     "Nettoabsatz Aktienfonds No Load" as IND.DZCF.Nettoabsatz.Aktienfonds.No.Load,
//     "Nettoabsatz Bankindividuelle Fondsgruppen Gesamt" as IND.DZCF.Nettoabsatz.Bankindividuelle.Fondsgruppen.Gesamt,
    "Nettoabsatz Drittfonds (attrax)"  or "Nettoabsatz DrittFonds" as IND.DZCF.Nettoabsatz.Drittfonds.OR.attrax,
    "Nettoabsatz DrittFonds" as IND.DZCF.Nettoabsatz.Drittfonds.attrax,
//     "Nettoabsatz ELTIF" as IND.DZCF.Nettoabsatz.ELTIF,
//     "Nettoabsatz FK-/institutionelle Publikumsfonds" as IND.DZCF.Nettoabsatz.FK.institutionelle.Publikumsfonds,
//     "Nettoabsatz Fondsgebundene Versicherungen" as IND.DZCF.Nettoabsatz.Fondsgebundene.Versicherungen,
//     "Nettoabsatz Fremdfonds" as IND.DZCF.Nettoabsatz.Fremdfonds,
//     "Nettoabsatz Geldmarktfonds" as IND.DZCF.Nettoabsatz.Geldmarktfonds,
//     "Nettoabsatz Immobilienfonds" as IND.DZCF.Nettoabsatz.Immobilienfonds,
//     "Nettoabsatz MeinInvest" as IND.DZCF.Nettoabsatz.MeinInvest,
//     "Nettoabsatz Mischfonds / Sonstige Load" as IND.DZCF.Nettoabsatz.Mischfonds.Sonstige.Load,
//     "Nettoabsatz Mischfonds / Sonstige No Load" as IND.DZCF.Nettoabsatz.Mischfonds.Sonstige.No.Load,
//     "Nettoabsatz Private Label Fonds Load" as IND.DZCF.Nettoabsatz.Private.Label.Fonds.Load,
//     "Nettoabsatz Private Label Fonds No Load" as IND.DZCF.Nettoabsatz.Private.Label.Fonds.No.Load,
//     "Nettoabsatz PrivatFonds" as IND.DZCF.Nettoabsatz.PrivatFonds,
//     "Nettoabsatz Rentenfonds Load" as IND.DZCF.Nettoabsatz.Rentenfonds.Load,
//     "Nettoabsatz Rentenfonds No Load" as IND.DZCF.Nettoabsatz.Rentenfonds.No.Load,
//     "Nettoabsatz UniProfiRente / UniProfiRente Select" as IND.DZCF.Nettoabsatz.UniProfiRente.UniProfiRente.Select,
//     "Nettoabsatz VermögenPlus/FirmenkundenInvest VVL" as IND.DZCF.Nettoabsatz.VermögenPlus.FirmenkundenInvest.VVL,
//     "Nettoabsatz Wertgesicherte Fonds Load" as IND.DZCF.Nettoabsatz.Wertgesicherte.Fonds.Load,
//     "Nettoabsatz Wertgesicherte Fonds No Load" as IND.DZCF.Nettoabsatz.Wertgesicherte.Fonds.No.Load,
//     "Nettoabsatz Sparpläne (Absatz)" as IND.DZCF.Nettoabsatz.Sparpläne.Absatz,
//     "Nettoabsatz (Sparplan)" as IND.DZCF.Nettoabsatz.Sparplan,
//     "Nettoabsatz VV Depot-B" as IND.DZCF.Nettoabsatz.VV.Depot.B,
//     "Bestand Aktienfonds Load" as IND.DZCF.Bestand.Aktienfonds.Load,
//     "Bestand Aktienfonds No Load" as IND.DZCF.Bestand.Aktienfonds.No.Load,
//     "Bestand Bankindividuelle Fondsgruppen Gesamt" as IND.DZCF.Bestand.Bankindividuelle.Fondsgruppen.Gesamt,
//     "Bestand Drittfonds (attrax)" as IND.DZCF.Bestand.Drittfonds.attrax,
//     "Bestand ELTIF" as IND.DZCF.Bestand.ELTIF,
//     "Bestand FK-/institutionelle Publikumsfonds" as IND.DZCF.Bestand.FK.institutionelle.Publikumsfonds,
//     "Bestand Fonds Sparpläne" as IND.DZCF.Bestand.Fonds.Sparpläne,
//     "Bestand Fondsgebundene Versicherungen" as IND.DZCF.Bestand.Fondsgebundene.Versicherungen,
//     "Bestand Fremdfonds" as IND.DZCF.Bestand.Fremdfonds,
//     "Bestand Geldmarktfonds" as IND.DZCF.Bestand.Geldmarktfonds,
//     "Bestand Immobilienfonds" as IND.DZCF.Bestand.Immobilienfonds,
//     "Bestand MeinInvest" as IND.DZCF.Bestand.MeinInvest,
//     "Bestand Mischfonds / Sonstige Load" as IND.DZCF.Bestand.Mischfonds.Sonstige.Load,
//     "Bestand Mischfonds / Sonstige No Load" as IND.DZCF.Bestand.Mischfonds.Sonstige.No.Load,
//     "Bestand Private Label Fonds Load" as IND.DZCF.Bestand.Private.Label.Fonds.Load,
//     "Bestand Private Label Fonds No Load" as IND.DZCF.Bestand.Private.Label.Fonds.No.Load,
//     "Bestand PrivatFonds" as IND.DZCF.Bestand.PrivatFonds,
//     "Bestand Rentenfonds Load" as IND.DZCF.Bestand.Rentenfonds.Load,
//     "Bestand Rentenfonds No Load" as IND.DZCF.Bestand.Bestand.Rentenfonds.No.Load,
//     "Bestand Sparpläne (Absatz)" as IND.DZCF.Bestand.Sparpläne.Absatz,
//     "Bestand UniProfiRente / UniProfiRente Select" as IND.DZCF.Bestand.UniProfiRente.UniProfiRente.Select,
//     "Bestand UniProfiRente1" as IND.DZCF.Bestand.UniProfiRente1,
//     "Bestand VermögenPlus/FirmenkundenInvest VVL" as IND.DZCF.Bestand.VermögenPlus.FirmenkundenInvest.VVL,
//     "Bestand Wertgesicherte Fonds Load" as IND.DZCF.Bestand.Wertgesicherte.Fonds.Load,
//     "Bestand Wertgesicherte Fonds No Load" as IND.DZCF.Bestand.Wertgesicherte.Fonds.No.Load,
//     "Absatzprovison Load Union WP-Fonds" as IND.DZCF.Absatzprovison.Load.Union.WP.Fonds,
//     "Absatzprovison Load Union Immo-Fonds" as IND.DZCF.Absatzprovison.Load.Union.Immo.Fonds,
//     "Absatzprovison Drittfonds (attrax)" as IND.DZCF.Absatzprovison.Drittfonds.attrax,
//     "Ertrag Kauf (Sparplan)" as IND.DZCF.Ertrag.Kauf.Sparplan,
//     "Absatzprovison Fremdfonds" as IND.DZCF.Absatzprovison.Fremdfonds,
//     "Absatzprovison No Load Union" as IND.DZCF.Absatzprovison.No.Load.Union,
//     "Kontinuitätsprovision Union (inkl. POINT)" as IND.DZCF.Kontinuitätsprovision.Union.inkl.POINT,
//     "Bestandsprovision Drittfonds (attrax)" as IND.DZCF.Bestandsprovision.Drittfonds.attrax,
//     "Bestandsprovision FremdFonds" as IND.DZCF.Bestandsprovision.FremdFonds,
//     "Brutto Abschlüsse UniProfiRente" as IND.DZCF.Brutto.Abschlüsse.UniProfiRente,
//     "Brutto Abschlüsse Fonds Sparpläne" as IND.DZCF.Brutto.Abschlüsse.Fonds.Sparpläne,
//     "Brutto Abschlüsse VL" as IND.DZCF.Brutto.Abschlüsse.VL,
//     "Netto Abschlüsse UniProfiRente" as IND.DZCF.Netto.Abschlüsse.UniProfiRente,
//     "Netto Abschlüsse Fonds Sparpläne" as IND.DZCF.Netto.Abschlüsse.Fonds.Sparpläne,
//     "Netto Abschlüsse VL" as IND.DZCF.Netto.Abschlüsse.VL,
//     "Bestand VL" as IND.DZCF.Bestand.VL,
//     "Bestand VJ Fonds Sparpläne" as IND.DZCF.Bestand.VJ.Fonds.Sparpläne,
//     "Bestand VJ UniProfiRente1" as IND.DZCF.Bestand.VJ.UniProfilRentel,
//     "Bestand VJ VL" as IND.DZCF.Bestand.VJ.VL,
    "Bruttoabsatz UIP Fonds" as IND.DZCF.Bruttoabsatz.UIP.Fonds,
    "Nettoabsatz UIP Fonds" as IND.DZCF.Nettoabsatz.UIP.Fonds,
    "Bestand UIP Fonds" as IND.DZCF.Bestand.UIP.Fonds
//     "VV-Gebühr" as IND.DZCF.VV.Gebühr

FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_CUI_BERATERDATEI_FONDS.qvd]
(qvd);




//Depotstammnummer 
//Geschäftquelle B  --> Depotstammnummer --> Kundennummern; Ohne R; U: Über Kundennummer 
//PK: Unterdepotnummer
//12-MSV: 77.000
// WP2 fehlt dann noch 

//Auf Validierung warten





// [IND.DZC.EG.Erfolgsgarant]:

// LOAD

// 	"Einheiten-Nr. Haushaltseinheit"as ##EHT.STM.HES#DZ.EG,
    
//     "Einheiten-Nr. Haushaltseinheit" as DZC.EG.Einheiten.Nr.Haushaltseinheit,
//     Personennummer as DZC.EG.Personennummer,
//     Name as DZC.EG.Name,
//     Zweigstelle as DZC.EG.Zweigstelle,
//     Kundenberater as DZC.EG.Kundenberater,
//     "Aktiv gemanagte Fonds" as DZC.EG.Aktiv.gemanagte.Fonds,
//     Immobilienfonds as DZC.EG.Immobilienfonds,
//     "Depot B mit Zertifikat" as DZC.EG.Depot.B.mit.Zertifikat,
//     Ansparplan as DZC.EG.Ansparplan,
    
//     Rangesum( 	if("Aktiv gemanagte Fonds" > 0, 1, 0), 
//     			if(Immobilienfonds > 0, 1, 0),
//     			if("Depot B mit Zertifikat" > 0, 1, 0),
//     			if(Ansparplan > 0, 1, 0)) 	as 	DZC.EG.Anzahl.Erfolgsgaranten,
    
//     "Volumen Depot B" as DZC.EG.Volumen.Depot.B,
//     "Volumen Union-Depot" as DZC.EG.Volumen.Union.Depot,
//     "Volumen Depot-B und Union-Depot" as DZC.EG.Volumen.Depot.B.und.Union.Depot,
//     Aktienbestand as DZC.EG.Aktienbestand,
//     "letzte Beratung" as DZC.EG.letzte.Beratung,
//     "Datum WpHG-Protokoll" as DZC.EG.Datum.WpHG.Protokoll,
//     Alter as DZC.EG.Alter,
//     Liquidität as DZC.EG.Liquidität,
//     Gehalt as DZC.EG.Gehalt,
//     Risikoklasse as DZC.EG.Risikoklasse
    

// FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/DZ_BANK_Erfolgsgarant.qvd]
// (qvd);






/*     Auskommentiert am 24. Feb 2023



[IND.MDD.Marktdatendownload]:

LOAD
	AutoNumberHash256(
    Applymap('MapKundeBerater',Bankkundennummer, '-9999999999') ,
    year(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')), 
    month(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
    as  ##EHT.STM.HES#MDD,
    
   
    
    Geschäftsquelle as IND.MDD.Geschäftsquelle,
    "betreuender Berater" as IND.MDD.betreuender.Berater,
    Depotnummer as IND.MDD.Depotnummer,
    //"betreuender Berater" as IND.MDD.betreuender.Berater,
    Depotstammnummer as IND.MDD.Depotstammnummer,
    Eröffnungsdatum as IND.MDD.Eröffnungsdatum,
    Kundennummer as IND.MDD.Kundennummer,
    Applymap('MapKundeBerater',Bankkundennummer, '-9999999999') as IND.MDD.Bankkundennummer,
    "VA-Gruppe" as IND.MDD.VA.Gruppe,
    Depotart as IND.MDD.Depotart,
    Depotkanal as IND.MDD.Depotkanal,
    Depotvariante as IND.MDD.Depotvariante,
    "Fremdfonds ja/nein" as IND.MDD.Fremdfonds.ja.nein,
    Fondsbezeichnung as IND.MDD.Fondsbezeichnung,
    date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.MDD.Datum,
    year(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.Datum.Jahr,
    month(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.Datum.Monat,
    Fondsgruppe as IND.MDD.Fondsgruppe,
    Gattung as IND.MDD.Gattung,
    "Brutto YTM" as IND.MDD.Brutto.YTM,
//     "Netto YTM" as IND.MDD.Netto.YTM,
    "Bestand in Euro" as IND.MDD.Bestand.in.Euro,
    "Bestand in Stücke" as IND.MDD.Bestand.in.Stücke,
    "Gewinn und Verlust" as IND.MDD.Gewinn.und.Verlust,
    "Ansparplan ab" as IND.MDD.Ansparplan.ab,
    "Ansparplan bis" as IND.MDD.Ansparplan.bis,
    "Absatzprovision Load-Fonds" as IND.MDD.Absatzprovision.Load.Fonds,
    "Gebühren YTM" as IND.MDD.Gebühren.YTM,
    "Absatzprovision NoLoad-Fonds" as IND.MDD.Absatzprovision.NoLoad.Fonds,
    Institutsfondsprovision as IND.MDD.Institutsfondsprovision,
    Kontinuitätsprovision as IND.MDD.Kontinuitätsprovision,
    "Erträge aus Neueröffnungen" as IND.MDD.Erträge.aus.Neueröffnungen,
    "Zufluss YTM" as IND.MDD.Zufluss.YTM,
    "Rückfluss YTM" as IND.MDD.Rückfluss.YTM,
    "neuer Ansparplan" as IND.MDD.neuer.Ansparplan,
    "aufgelöster Ansparplan" as IND.MDD.aufgelöster.Ansparplan,
    "12-Monatssparvolumen" as IND.MDD.12.Monatssparvolumen,
    "Veränderung 12-Monatssparvolumen zu Vormonat" as IND.MDD.Veränderung.12.Monatssparvolumen.zu.Vormonat,
    "Veränderung 12-Monatssparvolumen zu Vorjahresende" as IND.MDD.Veränderung.12.Monatssparvolumen.zu.Vorjahresende,
    "Absatzprovision Load aus regelm. Zahlungen YTM" as IND.MDD.Absatzprovision.Load.aus.regelm.Zahlungen.YTM,
    "Portfolioerstattung YTM" as IND.MDD.Portfolioerstattung.YTM,
    "Kontinuitätsprovision attrax YTM" as IND.MDD.Kontinuitätsprovision.attrax.YTM,
    "Fonds Nachhaltigkeit Kz" as IND.MDD.Fonds.Nachhaltigkeit.Kz,
    "Auslagerungsgebühr YTM" as IND.MDD.Auslagerungsgebühr.YTM,
    "Gebühr erreicht YTM" as IND.MDD.Gebühr.erreicht.YTM,
    "Gebühr erreicht" as IND.MDD.Gebühr.erreicht,
    "UDO Kz" as IND.MDD.UDO.Kz,
    "Brutto aus regelm. Zahlungen YTM" as IND.MDD.Brutto.aus.regelm.Zahlungen.YTM,
    "Zufluss aus regelm. Zahlungen YTM" as IND.MDD.Zufluss.aus.regelm.Zahlungen.YTM,
    "Rückfluss aus regelm. Zahlungen YTM" as IND.MDD.Rückfluss.aus.regelm.Zahlungen.YTM,
    Risikoklasse as IND.MDD.Risikoklasse,
    "Portfolioerstattung YTM" as IND.MDD.Portfolioerstattung.YTM,
    Fondstyp as IND.MDD.Fondstyp,
    Fondsart as IND.MDD.Fondsart
FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Marktdatendownload_neu.qvd]
(qvd);


*/



[IND.MDD.Marktdatendownload]:

LOAD

     
    AutoNumberHash256(if(num("betreuender Berater")=0 OR isnull(num("betreuender Berater"))or len(num("betreuender Berater"))=0,'84002',num("betreuender Berater"))
    ,
    year(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')), 
    month(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')))
    as  ANH#Kundenberater#Join,
   
   
   
    
//     Geschäftsquelle as IND.MDD.Geschäftsquelle,
    AutoNumberHash256(if(num("betreuender Berater")=0 or isnull("betreuender Berater"),'84002',num("betreuender Berater"))) as IND.MDD.betreuender.Berater,
//     Depotnummer as IND.MDD.Depotnummer,
//     Depotstammnummer as IND.MDD.Depotstammnummer,
//     Eröffnungsdatum as IND.MDD.Eröffnungsdatum,
//     Kundennummer as IND.MDD.Kundennummer,
//     Applymap('MapKundeBerater',Bankkundennummer, '-9999999999') as IND.MDD.Bankkundennummer,
//     "VA-Gruppe" as IND.MDD.VA.Gruppe,
     Depotart as IND.MDD.Depotart,
    Depotkanal as IND.MDD.Depotkanal,
    Depotvariante as IND.MDD.Depotvariante,
//     "Fremdfonds ja/nein" as IND.MDD.Fremdfonds.ja.nein,
//     Fondsbezeichnung as IND.MDD.Fondsbezeichnung,
	date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.MDD.Datum,
    MonthEnd(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.MonthEnd,
    year(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.Datum.Jahr,
    month(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.Datum.Monat,
     Fondsgruppe as IND.MDD.Fondsgruppe,
     AutoNumberHash256(Bankkundennummer) as IND.MDD.Bankkundennummer,
//     Gattung as IND.MDD.Gattung,
    "Brutto YTM" as IND.MDD.Brutto.YTM,
    "Netto YTM" as IND.MDD.Netto.YTM,
     "Bestand in Euro" as IND.MDD.Bestand.in.Euro,
//      "Bestand in Stücke" as IND.MDD.Bestand.in.Stücke,
//     "Gewinn und Verlust" as IND.MDD.Gewinn.und.Verlust,
//     "Ansparplan ab" as IND.MDD.Ansparplan.ab,
//     "Ansparplan bis" as IND.MDD.Ansparplan.bis,
     "Absatzprovision Load-Fonds" as IND.MDD.Absatzprovision.Load.Fonds,
//     "Gebühren YTM" as IND.MDD.Gebühren.YTM,
     "Absatzprovision NoLoad-Fonds" as IND.MDD.Absatzprovision.NoLoad.Fonds,
     Institutsfondsprovision as IND.MDD.Institutsfondsprovision,
     Kontinuitätsprovision as IND.MDD.Kontinuitätsprovision,
//     "Erträge aus Neueröffnungen" as IND.MDD.Erträge.aus.Neueröffnungen,
//     "Zufluss YTM" as IND.MDD.Zufluss.YTM,
//     "Rückfluss YTM" as IND.MDD.Rückfluss.YTM,
//     "neuer Ansparplan" as IND.MDD.neuer.Ansparplan,
//     "aufgelöster Ansparplan" as IND.MDD.aufgelöster.Ansparplan,
     	"12-Monatssparvolumen" as IND.MDD.12.Monatssparvolumen,
     	"Veränderung 12-Monatssparvolumen zu Vormonat" as IND.MDD.Veränderung.12.Monatssparvolumen.zu.Vormonat,
   	 	"Veränderung 12-Monatssparvolumen zu Vorjahresende" as IND.MDD.Veränderung.12.Monatssparvolumen.zu.Vorjahresende,
//     "Absatzprovision Load aus regelm. Zahlungen YTM" as IND.MDD.Absatzprovision.Load.aus.regelm.Zahlungen.YTM,
//     "Portfolioerstattung YTM" as IND.MDD.Portfolioerstattung.YTM,
//     "Kontinuitätsprovision attrax YTM" as IND.MDD.Kontinuitätsprovision.attrax.YTM,
//     "Fonds Nachhaltigkeit Kz" as IND.MDD.Fonds.Nachhaltigkeit.Kz,
//     "Auslagerungsgebühr YTM" as IND.MDD.Auslagerungsgebühr.YTM,
//     "Gebühr erreicht YTM" as IND.MDD.Gebühr.erreicht.YTM,
     "Gebühr erreicht" as IND.MDD.Gebühr.erreicht
//     "UDO Kz" as IND.MDD.UDO.Kz,
//     "Brutto aus regelm. Zahlungen YTM" as IND.MDD.Brutto.aus.regelm.Zahlungen.YTM,
//     "Zufluss aus regelm. Zahlungen YTM" as IND.MDD.Zufluss.aus.regelm.Zahlungen.YTM,
//     "Rückfluss aus regelm. Zahlungen YTM" as IND.MDD.Rückfluss.aus.regelm.Zahlungen.YTM,
//     Risikoklasse as IND.MDD.Risikoklasse,
//     Fondstyp as IND.MDD.Fondstyp,
//     Fondsart as IND.MDD.Fondsart
FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Marktdatendownload_neu.qvd]
(qvd)
where 
   date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')>= addmonths('$(vMaxStichtag)',-'$(vzMonthBackMDD)');










/*
[IND.MDD.Marktdatendownload]:

LOAD

AutoNumberHash256("Bank-
kunden-
nummer", year(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')), month(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY'))) as  ##EHT.STM.HES#MDD,

    date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY') as MDD.Datum,
    
    BLZ as MDD.BLZ,
    "Ge-
schäfts-
quelle" as MDD.Geschäftsquelle,
    Depotnummer as MDD.Depotnummer,
    "Depot-
stamm-
nummer" as MDD.Depotstammnummer,
    "Eröff-
nungs-
datum" as MDD.Eröffnungsdatum,
    "Gültig 
Bis" as MDD.Gültig.bis,
    "Kunden-
nummer" as MDD.Kundennummer,
    "Bank-
kunden-
nummer" as MDD.Bankkundennummer,
    Vorname as MDD.Vorname,
    Name as MDD.Name,
    "Depot-
art" as MDD.Depotart,
    "Depot-
kanal" as MDD.Depotkanal,
    Fondsbezeichnung as MDD.Fondsbezeichnung,
    "Fonds-
fällig-
keit" as MDD.Fondsfälligkeit,
    "Fonds-
gruppe" as MDD.Fondsgruppe,
    "Gat-
tung" as MDD.Gattungsart,
    Bruttoabsatz as MDD.Bruttoabsatz,
    Nettoabsatz as MDD.Nettoabsatz,
    "Bestand in
Euro" as MDD.Bestand.in.Euro,
    "Bestand in Stücke" as MDD.Bestand.in.Stücke,
    "Gewinn und Verlust" as MDD.Gewinn.und.Verlust,
    "Anspar-
plan
ab" as MDD.Ansparplan.ab,
    "Anspar-
plan
bis" as MDD.Ansparplan.bis,
    "neuer
Anspar-
plan" as MDD.neuer.Ansparplan,
    "aufgelöster
Anspar-
plan" as MDD.aufgelöster.Ansparplan,
    "12-Monatssparvolumen" as MDD.12.Monatssparvolumen,
    "Veränderung 12-Monatssparvolumen zu Vormonat" as MDD.Veränderung.12.Monatssparvolumen.zu.Vormonat,
    "Veränderung 12-Monatssparvolumen zu Vorjahresende" as MDD.Veränderung.12.Monatssparvolumen.zu.Vorjahresende,
    Risikoklasse as MDD.Risikoklasse,
    Portfolioerstattung as MDD.Portfolioerstattung,
    Fondstyp as MDD.Fondstyp,
    Fondsart as MDD.Fondsart,
    "Brutto YTM" as MDD.Brutto.YTM,
    "Netto YTM" as MDD.Netto.YTM,
    "Zufluss YTM" as MDD.Zufluss.YTM,
    "Rückfluss YTM" as MDD.Rückfluss.YTM,
    "Brutto aus regelm. Zahlungen YTM" as MDD.Brutto.aus.regelm.Zahlungen.YTM,
    "Zufluss aus regelm. Zahlungen YTM" as MDD.Zufluss.aus.regelm..Zahlungen.YTM,
    "Rückfluss aus regelm. Zahlungen YTM" as MDD.Rückfluss.aus.regelm.Zahlungen.YTM,
    Depotart as MDD.Depotart.b,
    Produktart as MDD.Produktart.b,
    Depotvariante as MDD.Depotvariante
FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Marktdatendownload.qvd]
(qvd);

*/



/*		

[IND.MDD.U.Marktdatendownload]:
LOAD
	AutoNumberHash256(
    Applymap('MapKundeBerater',Bankkundennummer, '-9999999999'), 
    year(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')), 
    month(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')))
    as  ##EHT.STM.HES#IND.MDD.U, 
    
    Geschäftsquelle as IND.MDD.U.Geschäftsquelle,
    Depotnummer as IND.MDD.U.Depotnummer,
    Depotstammnummer as IND.MDD.U.Depotstammnummer,
    Eröffnungsdatum as IND.MDD.U.Eröffnungsdatum,
    Kundennummer as IND.MDD.U.Kundennummer,
    Applymap('MapKundeBerater',Bankkundennummer, '-9999999999') as IND.MDD.U.Bankkundennummer.Berater,
    "VA-Gruppe" as IND.MDD.U.VA.Gruppe,
    Depotkanal as IND.MDD.U.Depotkanal,
    Depotvariante as IND.MDD.U.Depotvariante,
    "Fremdfonds ja/nein" as IND.MDD.U.Fremdfonds.ja.nein,
    date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')  as IND.MDD.U.Datum,
    year(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.U.Datum.Jahr,
    month(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.U.Datum.Monat,
    "Brutto YTM" as IND.MDD.U.Brutto.YTM,
    "Netto YTM" as IND.MDD.U.Netto.YTM,
    "Bestand in Euro" as IND.MDD.U.Bestand.in.Euro,
    "Bestand in Stücke" as IND.MDD.U.Bestand.in.Stücke,
    "Ansparplan ab" as IND.MDD.U.Ansparplan.ab,
    "Absatzprovision Load-Fonds" as IND.MDD.U.Absatzprovision.Load.Fonds,
    "Gebühren YTM" as IND.MDD.U.Gebühren.YTM,
    "Absatzprovision NoLoad-Fonds" as IND.MDD.U.Absatzprovision.NoLoad.Fonds,
    Institutsfondsprovision as IND.MDD.U.Institutsfondsprovision,
    Kontinuitätsprovision as IND.MDD.U.Kontinuitätsprovision,
    "Erträge aus Neueröffnungen" as IND.MDD.U.Erträge.aus.Neueröffnungen,
    "12-Monatssparvolumen" as IND.MDD.U.12.Monatssparvolumen,
    "Veränderung 12-Monatssparvolumen zu Vormonat" as IND.MDD.U.Veränderung.12.Monatssparvolumen.zu.Vormonat,
    "Veränderung 12-Monatssparvolumen zu Vorjahresende" as IND.MDD.U.Veränderung.12.Monatssparvolumen.zu.Vorjahresende,
    "Absatzprovision Load aus regelm. Zahlungen YTM" as IND.MDD.U.Absatzprovision.Load.aus.regelm.Zahlungen.YTM,
    "Portfolioerstattung YTM" as IND.MDD.U.Portfolioerstattung.YTM,
    "Kontinuitätsprovision attrax YTM" as IND.MDD.U.Kontinuitätsprovision.attrax.YTM,
    "Fonds Nachhaltigkeit Kz" as IND.MDD.U.Fonds.Nachhaltigkeit.Kz,
    "Auslagerungsgebühr YTM" as IND.MDD.U.Auslagerungsgebühr.YTM,
    "Gebühr erreicht YTM" as IND.MDD.U.Gebühr.erreicht.YTM,
    "Gebühr erreicht" as IND.MDD.U.Gebühr.erreicht,
    "UDO Kz" as IND.MDD.U.UDO.Kz
FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Marktdatendownload_neu.qvd]
(qvd);

*/





// [IND.MDD.U.Marktdatendownload]:
// LOAD
// 	AutoNumberHash256(
//     Applymap('MapKundeBerater',Bankkundennummer, '-9999999999'), 
//     year(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')))
//     as  ##EHT.STM.HES#IND.MDD.U, 
    
//     Geschäftsquelle as IND.MDD.U.Geschäftsquelle,
// //     Depotnummer as IND.MDD.U.Depotnummer,
// //     Depotstammnummer as IND.MDD.U.Depotstammnummer,
// //     Eröffnungsdatum as IND.MDD.U.Eröffnungsdatum,
// //     Kundennummer as IND.MDD.U.Kundennummer,
//     Applymap('MapKundeBerater',Bankkundennummer, '-9999999999') as IND.MDD.U.Bankkundennummer.Berater,
// //     "VA-Gruppe" as IND.MDD.U.VA.Gruppe,
// //     Depotkanal as IND.MDD.U.Depotkanal,
// //     Depotvariante as IND.MDD.U.Depotvariante,
// //     "Fremdfonds ja/nein" as IND.MDD.U.Fremdfonds.ja.nein,
//     date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')  as IND.MDD.U.Datum,
//     year(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.U.Datum.Jahr,
//     month(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.U.Datum.Monat,
// //     "Brutto YTM" as IND.MDD.U.Brutto.YTM,
// //     "Netto YTM" as IND.MDD.U.Netto.YTM,
// //     "Bestand in Euro" as IND.MDD.U.Bestand.in.Euro,
// //     "Bestand in Stücke" as IND.MDD.U.Bestand.in.Stücke,
// //     "Ansparplan ab" as IND.MDD.U.Ansparplan.ab,
// //     "Absatzprovision Load-Fonds" as IND.MDD.U.Absatzprovision.Load.Fonds,
// //     "Gebühren YTM" as IND.MDD.U.Gebühren.YTM,
// //     "Absatzprovision NoLoad-Fonds" as IND.MDD.U.Absatzprovision.NoLoad.Fonds,
// //     Institutsfondsprovision as IND.MDD.U.Institutsfondsprovision,
// //     Kontinuitätsprovision as IND.MDD.U.Kontinuitätsprovision,
// //     "Erträge aus Neueröffnungen" as IND.MDD.U.Erträge.aus.Neueröffnungen,
//     "12-Monatssparvolumen" as IND.MDD.U.12.Monatssparvolumen
// //     "Veränderung 12-Monatssparvolumen zu Vormonat" as IND.MDD.U.Veränderung.12.Monatssparvolumen.zu.Vormonat,
// //     "Veränderung 12-Monatssparvolumen zu Vorjahresende" as IND.MDD.U.Veränderung.12.Monatssparvolumen.zu.Vorjahresende,
// //     "Absatzprovision Load aus regelm. Zahlungen YTM" as IND.MDD.U.Absatzprovision.Load.aus.regelm.Zahlungen.YTM,
// //     "Portfolioerstattung YTM" as IND.MDD.U.Portfolioerstattung.YTM,
// //     "Kontinuitätsprovision attrax YTM" as IND.MDD.U.Kontinuitätsprovision.attrax.YTM,
// //     "Fonds Nachhaltigkeit Kz" as IND.MDD.U.Fonds.Nachhaltigkeit.Kz,
// //     "Auslagerungsgebühr YTM" as IND.MDD.U.Auslagerungsgebühr.YTM,
// //     "Gebühr erreicht YTM" as IND.MDD.U.Gebühr.erreicht.YTM,
// //     "Gebühr erreicht" as IND.MDD.U.Gebühr.erreicht,
// //     "UDO Kz" as IND.MDD.U.UDO.Kz
// FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Marktdatendownload_neu.qvd]
// (qvd);










//		Emre am 30. Jan 2023: MDD nur einmal hochladen. Frage: Wieso wurde das in "B", "U", "R" unterteilt im Skript?

/*

[IND.MDD.U.Marktdatendownload]:
LOAD
	AutoNumberHash256("Bank-
kunden-
nummer" ,year(Date(Datum,'DD.MM.YYYY')), month(Date(Datum,'DD.MM.YYYY'))) as  ##EHT.STM.HES#IND.MDD.U, 
    Date(Datum,'DD.MM.YYYY')  as IND.MDD.U.Datum,
    "Ge-
schäfts-
quelle" as IND.MDD.U.Geschäftsquelle,
    Depotnummer as IND.MDD.U.Depotnummer,
    Depotstammnummer as IND.MDD.U.Depotstammnummer,
    Eröffnungsdatum as IND.MDD.U.Eröffnungsdatum,
    Kundennummer as IND.MDD.U.Kundennummer,
    "Bank-
kunden-
nummer" as IND.MDD.U.Bankkundennummer,
    "VA-Gruppe" as IND.MDD.U.VA.Gruppe,
    Depotkanal as IND.MDD.U.Depotkanal,
    Depotvariante as IND.MDD.U.Depotvariante,
    "Fremd-
fonds ja/nein" as IND.MDD.U.Fremdfonds.ja.nein,    
    "Brutto YTM" as IND.MDD.U.Brutto.YTM,
    "Netto YTM" as IND.MDD.U.Netto.YTM,
	"Bestand in
Euro" as IND.MDD.U.Bestand.in.Euro,
    "Bestand in Stücke" as IND.MDD.U.Bestand.in.Stücke,
"Anspar-
plan
ab" as IND.MDD.U.Ansparplan.ab,
  "Absatz-
provision
Load-Fonds" as IND.MDD.U.Absatzprovision.Load.Fonds,
    "Gebühren YTM" as IND.MDD.U.Gebühren.YTM,
    "Absatz-
provision
NoLoad-
Fonds" as IND.MDD.U.Absatzprovision.NoLoad.Fonds,
    "Instituts-
fonds-
provision" as IND.MDD.U.Institutsfondsprovision,
    "Kontinuitäts-
provision" as IND.MDD.U.Kontinuitätsprovision,
    "Erträge 
aus Neu-
eröff-
nungen" as IND.MDD.U.Erträge.aus.Neueröffnungen,
        "12-Monatssparvolumen" as IND.MDD.U.12.Monatssparvolumen,
         "Veränderung 12-Monatssparvolumen zu Vormonat" as IND.MDD.U.Veränderung.12.Monatssparvolumen.zu.Vormonat,
"Absatzprovision Load aus regelm. Zahlungen YTM" as IND.MDD.U.Absatzprovision.Load.aus.regelm.Zahlungen.YTM,
"Portfolioerstattung YTM" as IND.MDD.U.Portfolioerstattung.YTM,
 "Kontinuitätsprovision attrax YTM" as IND.MDD.U.Kontinuitätsprovision.attrax.YTM,
    Stammdepoteröffnungsdatum as IND.MDD.U.Stammdepoteröffnungsdatum,
    "Fonds Nachhaltigkeit Kz" as IND.MDD.U.Fonds.Nachhaltigkeit.Kz,
    "Auslagerungsgebühr YTM" as IND.MDD.U.Auslagerungsgebühr.YTM,
    "Gebühr erreicht YTM" as IND.MDD.U.Gebühr.erreicht.YTM,
    "Gebühr erreicht" as IND.MDD.U.Gebühr.erreicht,
 "UDO Kz" as IND.MDD.U.UDO.Kz
    
FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Marktdatendownload.qvd]
(qvd);


*/



// [IND.MDD.R.Marktdatendownload]:

// LOAD
// 	AutoNumberHash256(
//     "betreuender Berater" ,
//     year(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
//     as  ##EHT.STM.HES#IND.MDD.R,  	//Date hinzufügen, Datum formatieren -> Depotnummer 76856228 fehlt
    
//     Geschäftsquelle as IND.MDD.R.Geschäftsquelle,
// //     "betreuende Filiale" as IND.MDD.R.betreuende.Filiale,
//     "betreuender Berater" as IND.MDD.R.betreuender.Berater,
// //     Depotnummer as IND.MDD.R.Depotnummer,
// //     Kundennummer as IND.MDD.R.Kundennummer,
//     Applymap('MapKundeBerater',Bankkundennummer, '-9999999999') as IND.MDD.R.Bankkundennummer.Berater,
// //     "Brutto YTM" as IND.MDD.R.Brutto.YTM,
// //     "Netto YTM" as IND.MDD.R.Netto.YTM,
//     date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')  as IND.MDD.R.Datum,
//     year(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.R.Jahr,
//     month(date(alt(Datum,Date#(Datum,'YYYY-MM-DD'),Date#(Datum,'MM-DD-YYYY'),Date#(Datum,'DD/MM/YYYY'),Date#(Datum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.R.Datum.Monat,
// //     "Zufluss YTM" as IND.MDD.R.Zufluss.YTM,
// //     "Rückfluss YTM" as IND.MDD.R.Rückfluss,
// //     "Bestand in Euro" as IND.MDD.R.Bestand.in.Euro,
// //     "Bestand in Stücke" as IND.MDD.R.Bestand.in.Stücke,
//     "12-Monatssparvolumen" as IND.MDD.R.12.Monatssparvolumen
    
// FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Marktdatendownload_neu.qvd]
// (qvd);







// /* Stand 07. Februar: Ausgeblendet, da Marktdatendownload_Neu verwendet wird.

// [IND.MDD.R.Marktdatendownload]:
// LOAD
// 	AutoNumberHash256("betreuender Berater" ,year(Date(Datum,'DD.MM.YYYY')), month(Date(Datum,'DD.MM.YYYY'))) as  ##EHT.STM.HES#IND.MDD.R,   //Date hinzufügen, Datum formatieren -> Depotnummer 76856228 fehlt
//     "betreuender Berater" as IND.MDD.betreuender.Berater,
//     "Ge-
// schäfts-
// quelle" as IND.MDD.R.Geschäftsquelle,
//     Date(Datum,'DD.MM.YYYY')  as IND.MDD.R.Datum,
//     Kundennummer as IND.MDD.R.Kundennummer,
//     Depotnummer as IND.MDD.R.Depotnummer,
//     "Bank-
// kunden-
// nummer" as IND.MDD.R.Bankkundennummer,
//     "Brutto YTM" as IND.MDD.R.Bruttoabsatz,
//     "Netto YTM" as IND.MDD.R.Nettoabsatz,
//     //"Zufluß YTM" or 
//    "Zufluss YTM" as IND.MDD.R.Zufluß,
//    // "Rückfluß YTM" 
//     "Rückfluss YTM"	as IND.MDD.R.Rückfluß,
//     "Bestand in
// Euro" as IND.MDD.R.Bestand.in.Euro,
//     "Bestand in Stücke" as IND.MDD.R.Bestand.in.Stücke,
//     "12-Monatssparvolumen" as IND.MDD.R.12.Monatssparvolumen
    
// FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Marktdatendownload.qvd]
// (qvd);

// */







// [IND.MDD.B.Marktdatendownload]:
// LOAD
// 	AutoNumberHash256(
//     Applymap('MapKundeDepot',Depotnummer, '-9999999999'),
//     year(date(alt(Stichtag,Date#(Stichtag,'YYYY-MM-DD'),Date#(Stichtag,'MM-DD-YYYY'),Date#(Stichtag,'DD/MM/YYYY'),Date#(Stichtag,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(Stichtag,Date#(Stichtag,'YYYY-MM-DD'),Date#(Stichtag,'MM-DD-YYYY'),Date#(Stichtag,'DD/MM/YYYY'),Date#(Stichtag,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
//     as  ##EHT.STM.HES#IND.MDD.B,  
 	
   
//     //Stichtag muss noch hinzugefügt werden
//     Applymap('MapKundeDepot',Depotnummer, '-9999999999') as IND.MDD.B.Depotnummer,
// //     Sparplannummer as IND.MDD.B.Sparplannummer, // nicht vorhanden in MDD aber liegt beim sparplanstammdaten
// //     WKN as IND.MDD.B.WKN.,
// //     ISIN as IND.MDD.B.ISIN,
//     Gattungsart as IND.MDD.B.Gattungsart,			//ohne Fonds
//     if(Turnus = 'MONATLICH', Sparrate*12,
// 	if(Turnus='ZWEIMONATLICH', Sparrate*6,
// 	if(Turnus='JAEHRLICH', Sparrate))) as IND.MDD.B.Sparrate,
// //     Erfassungsdatum as IND.MDD.B.Erfassungsdatum,
// //     Laufzeitbeginn as IND.MDD.B.Laufzeitbeginn,
// //     Laufzeitende as IND.MDD.B.Laufzeitende,
// //     Ausführungstag as IND.MDD.B.Ausführungstag,
//     date(alt(Stichtag,Date#(Stichtag,'YYYY-MM-DD'),Date#(Stichtag,'MM-DD-YYYY'),Date#(Stichtag,'DD/MM/YYYY'),Date#(Stichtag,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.MDD.B.Stichtag,
//     year(date(alt(Stichtag,Date#(Stichtag,'YYYY-MM-DD'),Date#(Stichtag,'MM-DD-YYYY'),Date#(Stichtag,'DD/MM/YYYY'),Date#(Stichtag,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.B.Stichtag.Jahr,
//     month(date(alt(Stichtag,Date#(Stichtag,'YYYY-MM-DD'),Date#(Stichtag,'MM-DD-YYYY'),Date#(Stichtag,'DD/MM/YYYY'),Date#(Stichtag,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.MDD.B.Stichtag.Monat,
// //     Turnus as IND.MDD.B.Turnus,
// //     "Nächste Ausführung" as IND.MDD.B.naechste.Ausführung,
//     Status as IND.MDD.B.Status						//ohne GELOESCHT
    

// FROM [lib://QVD (vnppbw1wt201_qsadmin)/_Processed_Data/IND_WP2_Sparplanstammdaten.qvd]
// (qvd);





// @Rachit: Datum überarbeiten

// [IND.WP2.Bestandsübersicht.Berater]:
// LOAD

  
//   	AutoNumberHash256(Applymap('MapKundeBerater', KUNDENNUMMER, '-9999999999'),
    
//     year(	date(alt("Bewertung per",Date#("Bewertung per",'YYYY-MM-DD'),Date#("Bewertung per",'MM-DD-YYYY'),Date#("Bewertung per",'DD/MM/YYYY'),Date#("Bewertung per",'MM/DD/YYYY')),'DD.MM.YYYY') ), 
    
//     month(	date(alt("Bewertung per",Date#("Bewertung per",'YYYY-MM-DD'),Date#("Bewertung per",'MM-DD-YYYY'),Date#("Bewertung per",'DD/MM/YYYY'),Date#("Bewertung per",'MM/DD/YYYY')),'DD.MM.YYYY')	)
    
//     				) as  ANH#Personennummer#Join,
  
//     Applymap('MapKundeBerater', KUNDENNUMMER, '-9999999999') as IND.WP2.BUE.Kundennummer,
//     date(alt("Bewertung per",Date#("Bewertung per",'YYYY-MM-DD'),Date#("Bewertung per",'MM-DD-YYYY'),Date#("Bewertung per",'DD/MM/YYYY'),Date#("Bewertung per",'MM/DD/YYYY')),'DD.MM.YYYY') as IND.WP2.BUE.Bewertung.per,
//      year(	date(alt("Bewertung per",Date#("Bewertung per",'YYYY-MM-DD'),Date#("Bewertung per",'MM-DD-YYYY'),Date#("Bewertung per",'DD/MM/YYYY'),Date#("Bewertung per",'MM/DD/YYYY')),'DD.MM.YYYY') ) as IND.WP2.BUE.Bewertung.per.Jahr,
//      month(	date(alt("Bewertung per",Date#("Bewertung per",'YYYY-MM-DD'),Date#("Bewertung per",'MM-DD-YYYY'),Date#("Bewertung per",'DD/MM/YYYY'),Date#("Bewertung per",'MM/DD/YYYY')),'DD.MM.YYYY')	) as IND.WP2.BUE.Bewertung.per.Monat,
//     KUNDENNAME as IND.WP2.BUE.Kundenname,
//     DEPOTNUMMER as IND.WP2.BUE.Depotname,
//     BERATER as IND.WP2.BUE.Berater,
//     FILIALNUMMER as IND.WP2.BUE.Filialnummer,
//     GEBDATE as IND.WP2.BUE.Geb.Date,
//     "KD VERWEIS NR" as IND.WP2.BUE.KD.Verweis.Nr,
//     "KD GROESSEN KLASSE FACT X2" as IND.WP2.BUE.KD.Groessen.Klasse.Fact.x2,
//     LAGERSTELLE as IND.WP2.BUE.LAGERSTELLE,
//     "Gattungsgruppe Detail" as IND.WP2.BUE.Gattungsgruppe.Detail, 
//     NOMINAL as IND.WP2.BUE.Nominal,
//     AUSFUEHRUNGSKURS as IND.WP2.BUE.Ausführungskurs,
//     WKN as IND.WP2.BUE.WKN,
//     DEPART as IND.WP2.BUE.DEPART,
//     "BEZEICHNUNG KURZ" as IND.WP2.BUE.Bezeichnung.kurz,
//     "Bestand Renten" as IND.WP2.BUE.Bestand.Renten,
//     "Bestand Aktien" as IND.WP2.BUE.Bestand.Aktien,
//     "Bestand Fonds Depot-B" as IND.WP2.BUE.Bestand.Fonds.Depot.B,
//     "Bestand Fonds Union Depot" as IND.WP2.BUE.Bestand.Fonds.Union.Depot,
//     "Bestand gesamt" as IND.WP2.BUE.Bestand.gesamt
    
    
  
// FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_WP2_Bestandsübersicht_Berater.qvd]
// (qvd);




 
 
// //Nur zum 31.12. 
// [IND.WP2.STM.Depotentgelte.Stammdaten]:
// LOAD
// 	Kundennr. as  ##EHT.STM.HES#IND.WP2.STM,    
//     Depotnr. as IND.WP2.STM.Depotnummer,
//     Kundennr. as IND.WP2.STM.Kundennummer,
//     Kundenname as IND.WP2.STM.Kundenname,
//     Orgaeinheit as IND.WP2.STM.Orgaeinheit,
//     Berater as IND.WP2.STM.Berater,
//     "Depotgebühren- schlüssel" as IND.WP2.STM.Depotgebühren.Schlüssel,
//     "Per-Datum der Entgeltberechnung" as IND.WP2.STM.Per.Datum.Entgeltberechnung,
//     "Belastetes Depotentgelt Netto" as IND.WP2.STM.Belastetes.Depotentgeld.Netto,
//     "Belastetes Depotentgelt MwSt" as IND.WP2.STM.Belastetes.Depotentgeld.MwSt,
//     "Belastetes Depotentgelt Brutto" as IND.WP2.STM.Belastes.Depotentgeld.Brutto,
//     "Abweichendes Depotentgelt Netto" as IND.WP2.STM.Abweichendes.Depotentgeld.Netto,
//     "Abweichendes Depotentgelt MwSt" as IND.WP2.STM.Abweichendes.Depotentgeld.MwSt,
//     "Abweichendes Depotentgelt Brutto"  as IND.WP2.STM.Abweichendes.Depotentgeld.Brutto

// FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_WP2_Depotentgelte_und_Stammdaten.qvd]
// (qvd);




// [IND.WP2.VWAW.Vertriebsauswertung.Berater]:
// LOAD
// 	AutoNumberHash256(
//      Applymap ('MapKundeBerater',KUNDENNUMMER, '-9999999999'),
//     year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
//     as  ##EHT.STM.HES#IND.WP2.VWAW,
    
//     Applymap ('MapKundeBerater',KUNDENNUMMER, '-9999999999') as IND.WP2.VWAW.Kundennummer,
//     KUNDENNAME as IND.WP2.VWAW.Kundenname,
//     DEPOTNUMMER as IND.WP2.VWAW.Depotnummer,
//     BERATER as IND.WP2.VWAW.Berater,
//     FILIALE as IND.WP2.VWAW.Filiale,
//     GEBDATE as IND.WP2.VWAW.Geb.Datum,
//     "KD VERWEIS NR" as IND.WP2.VWAW.KD.Verweis.Nr,
//     ABRKTO as IND.WP2.VWAW.Abrkto,
//     "KD GROESSEN KLASSE FACT X2" as IND.WP2.VWAW.KD.Groessen.Klasse.Fact.x2,
//     "Gattungsgruppe Detail" as IND.WP2.VWAW.Gattungsgruppe.Detail,
//     BETRACHTUNG as IND.WP2.VWAW.Betrachtung,
//  //   ABRECHNUNGSDATUM as IND.WP2.VWAW.Abrechnungsdatum,
 
//      date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.WP2.VWAW.Abrechnungsdatum,
//      year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.WP2.VWAW.Abrechnungsdatum.Jahr,
//   	 month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.WP2.VWAW.Abrechnungsdatum.Monat,
    
//     ORDERNUMMER as IND.WP2.VWAW.Ordernummer,
//     NOMINAL as IND.WP2.VWAW.Nominal,
//     AUSFUEHRUNGSKURS as IND.WP2.VWAW.Ausführungskurs,
//     WKN as IND.WP2.VWAW.WKN,
//     "BEZEICHNUNG KURZ" as IND.WP2.VWAW.Bezeichnung.kurz,
//     "TEXTSCHLUESSEL 10" as IND.WP2.VWAW.Textschlüssel.10,
//     "Anz. Käufe Depot-B Internet" as IND.WP2.VWAW.Anz.Käufe.Depot.B.Internet,
//     "Anz. Käufe Depot-B Mobile Brokerage" as IND.WP2.VWAW.Anz.Käufe.Depot.B.Mobile.Brockerage,
//     "Anz. Käufe Depot-B CallCenter" as IND.WP2.VWAW.Anz.Käufe.Depot.B.CallCenter,
//     "Anz. Käufe Depot-B mit Beratung" as IND.WP2.VWAW.Anz.Käufe.Depot.B.mit.Beratung,
//     "Anz. Käufe Depot-B ohne Beratung" as IND.WP2.VWAW.Anz.Käufe.Depot.B.ohne.Beratung,
//     "Anzahl Abrechnung Kauf Depot-B gesamt" as IND.WP2.VWAW.Anz.Abr.Kauf.Depot.B.gesamt,
//     "Anz. Verkäufe Depot-B Internet" as IND.WP2.VWAW.Anz.Verkäufe.Depot.B.Internet,
//     "Anz. Verkäufe Depot-B Mobile Brokerage" as IND.WP2.VWAW.Anz.Verkäufe.Depot.B.Brokerage,
//     "Anz. Verkäufe Depot-B CallCenter" as IND.WP2.VWAW.Anz.Verkäufe.Depot.B.CallCenter,
//     "Anz. Verkäufe Depot-B mit Beratung" as IND.WP2.VWAW.Anz.Verkäufe.Depot.B.mit.Beratung,
//     "Anz. Verkäufe Depot-B ohne Beratung" as IND.WP2.VWAW.Anz.Verkäufe.Depot.B.ohne.Beratung,
//     "Anzahl Abrechnung Verkauf Depot-B gesamt" as IND.WP2.VWAW.Anz.Abr.Verkauf.Depot.B.gesamt,
//     "Kauf Volumen Depot-B Internet" as IND.WP2.VWAW.Kauf.Volumen.Depot.B.Internet,
//     "Kauf Volumen Depot-B Mobile Broker" as IND.WP2.VWAW.Kauf.Volumen.Depot.B.Mobile.Broker,
//     "Kauf Volumen Depot-B CallCenter" as IND.WP2.VWAW.Kauf.Volumen.Depot.B.CallCenter,
//     "Kauf Volumen Depot-B mit Beratung" as IND.WP2.VWAW.Kauf.Volumen.Depot.B.mit.Beratung,
//     "Kauf Volumen Depot-B ohne Beratung" as IND.WP2.VWAW.Kauf.Volumen.Depot.B.ohne.Beratung,
//     "Kauf Volumen Depot-B ges." as IND.WP2.VWAW.Kauf.Volumen.Depot.B.gesamt,
//     "Verkauf Volumen Depot-B Internet" as IND.WP2.VWAW.Verkauf.Volumen.Depot.B.Internet,
//     "Verkauf Volumen Depot-B Mobile Brokerage" as IND.WP2.VWAW.Verkauf.Volumen.Depot.B.Mobile.Brokerage,
//     "Verkauf Volumen Depot-B CallCenter" as IND.WP2.VWAW.Verkauf.Volumen.Depot.B.CallCenter,
//     "Verkauf Volumen Depot-B mit Beratung" as IND.WP2.VWAW.Verkauf.Volumen.Depot.B.mit.Beratung,
//     "Verkauf Volumen Depot-B ohne Beratung" as IND.WP2.VWAW.Verkauf.Volumen.Depot.B.ohne.Beratung,
//     "Verkauf Volumen Depot-B gesamt" as IND.WP2.VWAW.Verkauf.Volumen.Depot.B.gesamt,
//     "Ertrag Depot-B Internet" as IND.WP2.VWAW.Ertrag.Depot.B.Internet,
//     "Ertrag Depot-B Mobile Brokerage" as IND.WP2.VWAW.Ertrag.Depot.B.Mobile.Brokerage,
//     "Ertrag Depot-B CallCenter" as IND.WP2.VWAW.Ertrag.Depot.B.CallCenter,
//     "Ertrag Depot-B mit Beratung" as IND.WP2.VWAW.Ertrag.Depot.B.mit.Beratung,
//     "Ertrag Depot-B ohne Beratung" as IND.WP2.VWAW.Ertrag.Depot.B.ohne.Beratung,
//     "Ertrag Depot-B gesamt" as IND.WP2.VWAW.Ertrag.Depot.B.gesamt
    

// FROM [lib://QVD (vnppbw1wt201_qsadmin)/_Processed_Data/IND_WP2_Vertriebswegeauswertung_Berater.qvd]
// (qvd);



// [IND.DZPB]:

// LOAD
// 	AutoNumberHash256("Personennummer_VRB", year(date(date#(Datenstichtag,'YYYY-MM-DD'),'DD.MM.YYYY')), month(date(date#(Datenstichtag,'YYYY-MM-DD'),'DD.MM.YYYY')))as ##EHT.STM.HES#IND.DZPB,
//     date(date#(Datenstichtag,'YYYY-MM-DD'),'DD.MM.YYYY') as IND.DZPB.Stichtag,
//     Kontonummer_VRB as IND.DZPB.Kontonummer,
//     Depotnummer_VRB as IND.DZPB.Depotnummer,
//     Personennummer_VRB as IND.DZPB.Personennummer,
//     Betreuer_DZPB as IND.DZPB.Betreuer.DZPB,
//     BLZ as IND.DZPB.BLZ,
//     "Filial-Nr." as IND.DZPB.Filiale.Nr,
//     "Betreuer-Nr." as IND.DZPB.Berater.Nr,
//     Betreuer as IND.DZPB.Betreuer,
//     Geschäftsvolumen as IND.DZPB.Geschäftsvolumen
    
    
// FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Control.qvd]
// (qvd);






[IND.VRC.Provisionen]:

LOAD
	AutoNumberHash256(Kundennummer,
  //  Applymap('MapKundeBerater' ,Kundennummer, '-9999999999'), 
    year(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	),		
    month(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	)	
    ) as ANH#Personennummer#Join, //##KTO.STM.#IND.VRC.PRV,
    
    
//     Applymap('MapKundeBerater' ,Kundennummer, '-9999999999') as IND.VRC.Provisionen.Kundennummer,
    AutoNumberHash256(Kundennummer) as IND.VRC.Provisionen.Kundennummer,
//     Kundenname as IND.VRC.Provisionen.Kundenname,
    "Prov. Ertrag (PKB) (EUR)" as IND.VRC.Provisionen.Ertrag,
    "Prov. Aufwand (PKB) (EUR)" as IND.VRC.Provisionen.Aufwand,
    "Prov. Beitrag (PKB) (EUR)" as IND.VRC.Provisionen.Beitrag,
    MonthEnd(date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')) as IND.VRC.Provisionen.MonthEnd,
    date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY') as IND.VRC.Provisionen.Stichtag,
    year(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	) as IND.VRC.Provisionen.Jahr,
    month(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	) as IND.VRC.Provisionen.Monat
    
FROM [lib://QVD (vnppbw1wt201_qsadmin)/_Processed_Data/IND_VRC_Provisionen.qvd]
(qvd);





[IND.Risikokosten]:

LOAD
	AutoNumberHash256(Kundennummer,
    //Applymap('MapKundeBerater' ,Kundennummer, '-9999999999'), 
    year(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	),		
    month(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	)	
    ) as ANH#Personennummer#Join, // ##KTO.STM.#IND.VRC.RSK, //##EHT.STM.HES#IND.VRC.RSK,

//     Applymap('MapKundeBerater' ,Kundennummer, '-9999999999') as IND.VRC.Risikokosten.Kundennummer ,
    AutoNumberHash256(Kundennummer) as IND.VRC.Risikokosten.Kundennummer ,
    "Exposure (EUR)" as IND.VRC.Risikokosten.Exposure,
    "KPM-Branche" as IND.VRC.Risikokosten.KPM.Branche,
    "Expected Loss (EUR)" as IND.VRC.Risikokosten.Expected.Lose,
    "CVaR (EUR)" as IND.VRC.Risikokosten.Cvar,
    date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')  as IND.VRC.Risikokosten.Stichtag,
    MonthEnd(date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')) as IND.VRC.Risikokosten.MonthEnd,
    year(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	) as IND.VRC.Risikokosten.Jahr,
    month(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	) as IND.VRC.Risikokosten.Monat,
    num(month(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	)) as IND.VRC.Risikokosten.Monat.num

FROM [lib://QVD (vnppbw1wt201_qsadmin)/_Processed_Data/IND_Risikokosten.qvd]
(qvd);



[IND.Tilgungen]:


LOAD

	AutoNumberHash256(Kundennummer,
//     Applymap('MapKundeBerater' ,Kundennummer, '-9999999999'), 
    year(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	),		
    month(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	)	
    ) as  ANH#Personennummer#Join, //##EHT.STM.HES#IND.Tilgungen,

//     Kundenname as IND.Tilgungen.Kundenname,
    AutoNumberHash256(Kundennummer) as IND.Tilgungen.Kundennummer ,
//     Applymap('MapKundeBerater' ,Kundennummer, '-9999999999') as IND.Tilgungen.Kundennummer ,
    "Reg.zahl.akt.Mon. (EUR)" as IND.Tilgungen.Reg.zahl.akt.Mon.EUR,
    "Reg.zahl.Folgejahr (EUR)" as IND.Tilgungen.Reg.zahl.Folgejahr.EUR,
    "Reg.zahl.Jahresende (EUR)" as IND.Tilgungen.Reg.zahl.Jahresende.EUR,
    "Reg.zahl.nächst.Mon. (EUR)" as IND.Tilgungen.Reg.zahl.nächst.Mon.EUR,
    "agree-Produktnummer" as IND.Tilgungen.Produktnummer,
    
    monthend(date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY'))  as IND.VRC.Tilgungen.MonthEnd,
    date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')  as IND.VRC.Tilgungen.Stichtag,
    year(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	) as IND.VRC.Tilgungen.Jahr,
    month(   date(alt(Stichtag,		Date#(Stichtag, 'YYYY-MM-DD'),		Date#(Stichtag, 'MM-DD-YYYY'),		Date#(Stichtag, 'DD/MM/YYYY'),		Date#(Stichtag, 'MM/DD/YYYY')	),	'DD.MM.YYYY')	) as IND.VRC.Tilgungen.Monat
    
    
FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Tilgungen.qvd]
(qvd);






// [VVW.CTL.Controlling]:
// LOAD
// 	AutoNumberHash256("Personennummer_VRB", year(Datenstichtag), month(Datenstichtag))as ##EHT.STM.HES#IND.VVW.CTL,
//     Datenstichtag as VVW.CTL.Datenstichtag,
//     Buchungsstelle as VVW.CTL.Buchungsstelle,
//     Investmentlösung as VVW.CTL.Investmentlösung,
//     Name as VVW.CTL.Name,
//     "Kunden-Nummer_DZPB" as VVW.CTL.Kunden.Nummer.DZPB,
//     Kontonummer_VRB as VVW.CTL.Kontonummer.VRB,
//     Depotnummer_VRB as VVW.CTL.Depotnummer.VRB,
//     Personennummer_VRB as VVW.CTL.Personennummer.VRB,
//     Start_Kunde as VVW.CTL.Start.Kunde,
//     "VV-Profil" as VVW.CTL.VV.Profil,
//     "VV-Art" as VVW.CTL.VV.Art,
//     Fee_in_% as VVW.CTL.Fee.in.%,
//     Betreuer_DZPB as VVW.CTL.Betreuer.DZPB,
//     BLZ as VVW.CTL.BLZ,
//     "Filial-Nr." as VVW.CTL.Filial.Nr,
//     "Betreuer-Nr." as VVW.CTL.Betreuer.Nr.,
//     Betreuer as VVW.CTL.Betreuer,
//     Leistungskonstellation as VVW.CTL.Leistungskonstellation,
//     Vergütungssatz as VVW.CTL.Vergütungssatz,
//     Vergütungsform as VVW.CTL.Vergütungsform,
//     Kunde_ist_aktiv as VVW.CTL.Kunde.ist.aktiv,
//     Kunde_ist_aktiv2 as VVW.CTL.Kunde.ist.aktiv2,
//     Zugang_aktuelles_Jahr as VVW.CTL.Zugang.aktuelles.Jahr,
//     Abgang_aktuelles_Jahr as VVW.CTL.Abgang.aktuelles.Jahr,
//     Geschäftsvolumen as VVW.CTL.Geschäftsvolumen,
//     AuM as VVW.CTL.AuM,
//     Mittelzufluss_aktueller_Monat as VVW.CTL.Mittelzufluss.aktueller.Monat,
//     Mittelabfluss_aktueller_Monat as VVW.CTL.Mittelabfluss.aktueller.Monat,
//     Mittelfluss_Netto_aktueller_Monat as VVW.CTL.Mittelfluss.Netto.aktueller.Monat,
//     "Gesamtnetto-Vergütung_ohne_Top-Bonus_aktueller_Monat" as VVW.CTL.Gesamtnetto.Vergütung.ohne.Top.Bonus.aktueller.Monat,
//     "davon_laufende_Gesamtnetto-Vergütung_aktueller_Monat" as VVW.CTL.davon.laufende.Gesamtnetto.Vergütung.aktueller.Monat,
//     "davon_einmalige_Gesamtnetto-Vergütung_aktueller_Monat" as VVW.CTL.davon.einmalige.Gesamtnetto.Vergütung.aktueller.Monat,
//     Mittelzufluss_kumuliert_aktuelles_Jahr as VVW.CTL.Mittelzufluss.kumuliert.aktuelles.Jahr,
//     Mittelabfluss_kumuliert_aktuelles_Jahr as VVW.CTL.Mittelabfluss.kumuliert.aktuelles.Jahr,
//     Mittelfluss_Netto_kumuliert_aktuelles_Jahr as VVW.CTL.Mittelfluss.Netto.kumuliert.aktuelles.Jahr,
//     "Gesamtnetto-Vergütung_ohne_Top-Bonus_kumuliert" as VVW.CTL.Gesamtnetto.Vergütung.ohne.Top.Bonus.kumuliert,
//     "davon_laufende_Gesamtnetto-Vergütung_kumuliert" as VVW.CTL.davon.laufende.Gesamtnetto.Vergütung.kumuliert,
//     "davon_einmalige_Gesamtnetto-Vergütung_kumuliert" as VVW.CTL.davon.einmalige.Gesamtnetto.Vergütung.kumuliert,
//     "Hochrechnung_Gesamtnetto-Vergütung_zum_Jahresultimo_ohne_Top-Bonus" as VVW.CTL.Hochrechnung.Gesamtnetto.Vergütung.zum.Jahresultimo.ohne.Top.Bonus,
//     "Hochrechnung_Top-Bonus_zum_Jahresultimo" as VVW.CTL.Hochrechnung.Top.Bonus.zum.Jahresultimo,
//     Performance_YTD_in_% as VVW.CTL.Performance.YTD.in.%
    
// FROM [lib://QVD (vnppbw1wt201_qsadmin)/_Processed_Data/IND_Control.qvd]
// (qvd);




/*

[IND.BPR.mit.MA]:
LOAD
// 	AutoNumberHash256(
//     Applymap('MapKundeBerater', KUNDENNUMMER_PB, '-9999999999'), 
//     year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
//     as ##EHT.STM.HES#IND.BPR,

    
    BENUTZERKENNUNG as ##STM.ORGA1#IND.BPR,
    
    Applymap('MapEasyCreditMitBerater', BENUTZERKENNUNG, '-9999999999') as IND.BPR.Benutzerkennung.Kundenberater,
    KUNDENNUMMER_PB as IND.BPR.Kundennummer,
    BASIS_PROVISION as IND.BPR.Basis.Provision,
    INTERNE_ABLOESE as IND.BPR.Interne.Ablöse,
    PROV_PR_BESTAND as IND.BPR.Prov.PR.Bestand,
    PROV_BESTAND as IND.BPR.Prov.Bestand,
    date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY') 	as IND.BPR.ABRECHNUNGSDATUM,
    year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) 	as IND.BPR.ABRECHNUNGSDATUM.Jahr,
    month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) 	as IND.BPR.ABRECHNUNGSDATUM.Monat,
    PROV_SCHUTZBRIEF as IND.BPR.Prov.Schutzbrief,
    URSPRUNGSKREDIT as IND.BPR.Ursprungskredit,
    RATENHOEHE as IND.BPR.Ratenhöhe,
    RATENANZAHL as IND.BPR.Ratenanzahl,
    ZINSSATZ as IND.BPR.Zinssatz,
    URSPRUENGLICHER_UMSATZ as IND.BPR.Urspruenglicher.Umsatz,
    PROVISIONSKENNZEICHEN as IND.BPR.Provisionskennzeichen,
  //  ABRECHNUNGSDATUM as IND.BPR.ABRECHNUNGSDATUM,
    STORNOPROVISION_GESAMT as IND.BPR.STORNOPROVISION.GESAMT
    
FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Bestandsprovisionsreport.qvd]
(qvd);


*/




[IND.BPR.VBB.Bestandsprovisionsreport.mit.MA.Verbundbilanz]:
LOAD
// 	 AutoNumberHash256(
//      //Applymap('MapEasyCreditMitBerater', BENUTZERKENNUNG, '-9999999999'), 
//      if(num(KUNDENSTAMMNUMMER_TB)=0 or isnull(KUNDENSTAMMNUMMER_TB),'9876543210',num(KUNDENSTAMMNUMMER_TB)),
// 	 year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//      month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
//      as ANH##VKN.Teambank#Join,
    
    
    
//     	 AutoNumberHash256(
//      //Applymap('MapEasyCreditMitBerater', BENUTZERKENNUNG, '-9999999999'), 
//      Applymap('Map.KundeHTausVKN.Teambank',num(KUNDENSTAMMNUMMER_TB),'9876543210'),
// 	 year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//      month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
//      as ANH#Personennummer#Join,
    
    
        	 AutoNumberHash256(
     if(num(KUNDENSTAMMNUMMER_TB)=0 or isnull(KUNDENSTAMMNUMMER_TB),'9876543210',
     	Applymap('Map.KundeHTausVKN.Teambank.AKT',num(KUNDENSTAMMNUMMER_TB),     
     	Applymap('Map.KundeHTausVKN.Teambank',num(KUNDENSTAMMNUMMER_TB),'9876543210'))),
	 		year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),
     			Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),
        		Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
     		month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),
     			Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),
        		Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
     as ANH#Personennummer#Join,
    
    
    
    //Applymap('MapEasyCreditMitBerater', BENUTZERKENNUNG, '-9999999999') as IND.BPR.VBB.Benutzerkennung.Kundenberater,
    AutoNumberHash256(BENUTZERKENNUNG) as IND.BPR.VBB.Benutzerkennung.Kundenberater,
//    KUNDENSTAMMNUMMER_TB as IND.BPR.VBB.KUNDENSTAMMNUMMER_TB,
    if(num(KUNDENSTAMMNUMMER_TB)=0 or isnull(KUNDENSTAMMNUMMER_TB),'9876543210',num(KUNDENSTAMMNUMMER_TB)) as IND.BPR.VBB.KUNDENSTAMMNUMMER_TB,
//     KUNDENNUMMER_PB as IND.BPR.VBB.Kundennummer,
     BASIS_PROVISION as IND.BPR.VBB.Basis.Provision,
//     INTERNE_ABLOESE as IND.BPR.VBB.Interne.Ablöse,
//     PROV_PR_BESTAND as IND.BPR.VBB.Prov.PR.Bestand,
    PROV_BESTAND as IND.BPR.VBB.Prov.Bestand,
    date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY') 	as IND.BPR.VBB.ABRECHNUNGSDATUM,
    MonthEnd(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY') )	as IND.BPR.VBB.ABRECHNUNGSDATUM.Monthend,
    year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) 	as IND.BPR.VBB.ABRECHNUNGSDATUM.Jahr,
    month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) 	as IND.BPR.VBB.ABRECHNUNGSDATUM.Monat,
    PROV_SCHUTZBRIEF as IND.BPR.VBB.Prov.Schutzbrief,
    STORNOPROVISION_GESAMT as IND.BPR.VBB.STORNOPROVISION.GESAMT


    
FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Bestandsprovisionsreport.qvd]
(qvd);












/*

//Bestandsprovisionsreport mit MA 
[IND.BPR.mit.MA]:
LOAD
	AutoNumberHash256(
    Applymap('MapKundeBerater', KUNDENNUMMER_PB, '-9999999999'), 
    year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
    month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
    as ##EHT.STM.HES#IND.BPR,

   
    Applymap('MapKundeBerater', KUNDENNUMMER_PB, '-9999999999') as IND.BPR.Kundennummer,
    BASIS_PROVISION as IND.BPR.Basis.Provision,
    INTERNE_ABLOESE as IND.BPR.Interne.Ablöse,
    PROV_PR_BESTAND as IND.BPR.Prov.PR.Bestand,
    PROV_BESTAND as IND.BPR.Prov.Bestand,
    date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY') 	as IND.BPR.Stichtag,
    year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) 	as IND.BPR.Jahr,
    month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) 	as IND.BPR.Monat,
    PROV_SCHUTZBRIEF as IND.BPR.Prov.Schutzbrief,
    URSPRUNGSKREDIT as IND.BPR.Ursprungskredit,
    RATENHOEHE as IND.BPR.Ratenhöhe,
    RATENANZAHL as IND.BPR.Ratenanzahl,
    ZINSSATZ as IND.BPR.Zinssatz,
    URSPRUENGLICHER_UMSATZ as IND.BPR.Urspruenglicher.Umsatz,
    PROVISIONSKENNZEICHEN as IND.BPR.Provisionskennzeichen,
    ABRECHNUNGSDATUM as IND.BPR.ABRECHNUNGSDATUM,
    STORNOPROVISION_GESAMT as IND.BPR.STORNOPROVISION.GESAMT
    
FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Bestandsprovisionsreport.qvd]
(qvd);


*/




// Emre 09.02.2023: date(alt(Auszahlungsdatum,Date#(Auszahlungsdatum,'YYYY-MM-DD'),Date#...) genommen um Datum einheitlich zu formatieren.
// @Rachit: Verknüpfung über Kundennummer PB gar nicht möglich!


[IND.AZS.mit.MA]:
LOAD
	AutoNumberHash256(
    
    
    //Applymap('MapEasyCreditMitBerater',Benutzerkennung,'-9999999999') ,
    if(num("Kundennummer PB")=0 or isnull("Kundennummer PB"),'9876543210',num("Kundennummer PB")),
    year(	date(alt(Auszahlungsdatum,Date#(Auszahlungsdatum,'YYYY-MM-DD'),Date#(Auszahlungsdatum,'MM-DD-YYYY'),Date#(Auszahlungsdatum,'DD/MM/YYYY'),Date#(Auszahlungsdatum,'MM/DD/YYYY')),'DD.MM.YYYY') 	), 
    month(	date(alt(Auszahlungsdatum,Date#(Auszahlungsdatum,'YYYY-MM-DD'),Date#(Auszahlungsdatum,'MM-DD-YYYY'),Date#(Auszahlungsdatum,'DD/MM/YYYY'),Date#(Auszahlungsdatum,'MM/DD/YYYY')),'DD.MM.YYYY') 	)
    
    )as ANH#Personennummer#Join,
    //Date#(Date(ABRECHNUNGSDATUM,'DD.MM.YYYY'),'DD.MM.YYYY') as IND.BPR.Stichtag,
    //date(date#(Auszahlungsdatum, 'YYYY-MM-DD'), 'DD.MM.YYYY') as IND.AZS.Stichtag,
 

    
   
   MonthEnd(date(alt(Auszahlungsdatum,Date#(Auszahlungsdatum,'YYYY-MM-DD'),Date#(Auszahlungsdatum,'MM-DD-YYYY'),Date#(Auszahlungsdatum,'DD/MM/YYYY'),Date#(Auszahlungsdatum,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.AZS.Auszahlungsdatum,
    
   year(	date(alt(Auszahlungsdatum,Date#(Auszahlungsdatum,'YYYY-MM-DD'),Date#(Auszahlungsdatum,'MM-DD-YYYY'),Date#(Auszahlungsdatum,'DD/MM/YYYY'),Date#(Auszahlungsdatum,'MM/DD/YYYY')),'DD.MM.YYYY') 	) as  IND.AZS.Auszahlungsdatum.Jahr,
      
   Month(	date(alt(Auszahlungsdatum,Date#(Auszahlungsdatum,'YYYY-MM-DD'),Date#(Auszahlungsdatum,'MM-DD-YYYY'),Date#(Auszahlungsdatum,'DD/MM/YYYY'),Date#(Auszahlungsdatum,'MM/DD/YYYY')),'DD.MM.YYYY') 	) as  IND.AZS.Auszahlungsdatum.Monat,
  
//     Vertragspartnername as IND.AZS.Vertragspartnername,
//     Vertragspartnernummer as IND.AZS.Vertragspartnernummer,
//     "Name Vertriebsstelle" as IND.AZS.Name.Vertriebsstelle,
//     "Nr. Vertriebsstelle" as IND.AZS.Nr.Vertriebsstelle,
//     Vertriebskanal as IND.AZS.Vertriebskanal,
//    Applymap('MapEasyCreditMitBerater',Benutzerkennung,'-9999999999') as IND.AZS.Benutzerkennung,
	AutoNumberHash256(Benutzerkennung) as IND.AZS.Benutzerkennung,
//     Mitarbeiter as IND.AZS.Mitarbeiter,
//     Antragsnummer as IND.AZS.Antragsnummer,
//     Anfragedatum as IND.AZS.Anfragedatum,
//   Auszahlungsdatum as IND.AZS.Auszahlungsdatum,
    "NeugeschÃ¤ft in EUR" as IND.AZS.Neugeschäft.in.EUR,
    "NeugeschÃ¤ft in StÃ¼ck" as IND.AZS.Neugeschäft.in.Stück,
//     Kontonummer as IND.AZS.Kontonummer,
//     Darlehensnehmer as IND.AZS.Darlehensnehmer,
//     "Anzahl Darlehensnehmer" as IND.AZS.Anzahl.Darlehensnehmer,
//     "Schutzbrief-Tarif Darlehensnehmer 1" as IND.AZS.Schutzbrief.Tarif.Darlehensnehmer.1,
//     "Schutzbrief-Tarif Darlehensnehmer 2" as IND.AZS.Schutzbrief.Tarif.Darlehensnehmer.2,
//     "Schutzbrief-Beitrag" as IND.AZS.Schutzbrief.Beitrag,
//     Produktvariante as IND.AZS.Produktvariante,
//     "Verkaufsvariante Finanzreserve" as IND.AZS.Verkaufsvariante.Finanzreserve,
//     "Produktpakete easyCredit" as IND.AZS.Produktpakete.easyCredit,
    "Verkaufte Finanzreserve in EUR" as IND.AZS.Verkaufte.Finanzreserve.in.EUR,
//     "Aktivierungswert Finanzreserve in EUR" as IND.AZS.Aktivierungswert.Finanzreserve.in.EUR,
//     "Schutzbrief-Tarif Finanzreserve" as IND.AZS.Schutzbrief.Tarif.Finanzreserve,
//     Mitgliedervorteil as IND.AZS.Mitgliedervorteil,
//     "KomplettablÃ¶sung Ratenkredite ohne Finanzreserve" as IND.AZS.Komplettablösung.Ratenkredite.ohne.Finanzreserve,
//     "KomplettablÃ¶sung Ratenkredite mit Finanzreserve" as IND.AZS.Komplettablösung.Ratenkredite.mit.Finanzreserve,
//     "Status Mitgliedervorteil" as IND.AZS.Status.Mitgliedervorteil,
//     "Personal-Nr" as IND.AZS.Personal.Nr,
//     "noline Kanalwechsel" as IND.AZS.noline.Kanalwechsel,
//     "FremdablÃ¶se gesamt mÃ¶glich in TEUR" as IND.AZS.Fremdablöse.gesamt.möglich.in.TEUR,
//     "davon FremdablÃ¶se nicht abgelÃ¶st in TEUR" as IND.AZS.davon.Fremdablöse.nicht.abgelöst.in.TEUR,
//     "FremdablÃ¶se Ratenkredit nicht abgelÃ¶st in TEUR" as IND.AZS.Fremdablöse.Ratenkredit.nicht.abgelöst.in.TEUR,
//     "FremdablÃ¶se Rahmenkredit nicht abgelÃ¶st in TEUR" as IND.AZS.Fremdablöse.Rahmenkredit.nicht.abgelöst.in.TEUR,
//     "FremdablÃ¶se Girokonto nicht abgelÃ¶st in TEUR" as IND.AZS.Fremdablöse.Girokonto.nicht.abgelöst.in.TEUR,
//     "FremdablÃ¶se Kreditkarte nicht abgelÃ¶st in TEUR" as IND.AZS.Fremdablöse.Kreditkarte.nicht.abgelöst.in.TEUR,
//     "EC Finanzreserve mÃ¶glich in EUR" as IND.AZS.EC.Finanzreserve.möglich.in.EUR,
//     "Versandart KUP Zugangsdaten" as IND.AZS.Versandart.KUP.Zugangsdaten,
//     Zinsflexibilisierung as IND.AZS.Zinsflexibilisierung,
    if(num("Kundennummer PB")=0 or isnull("Kundennummer PB"),'9876543210',num("Kundennummer PB")) as IND.AZS.Kundennummer.PB,
    "Verkaufte Finanzreserven Kombiverkauf in StÃ¼ck" as IND.AZS.Verkaufte.Finanzreserven.Kombiverkauf.in.Stück,
    "Verkaufte Finanzreserven Kombiverkauf in EUR" as IND.AZS.Verkaufte.Finanzreserven.Kombiverkauf.in.EUR,
    "Verkaufte Finanzreserven Einzelverkauf in StÃ¼ck" as IND.AZS.Verkaufte.Finanzreserven.Einzelverkauf.in.Stück,
    "Verkaufte Finanzreserven Einzelverkauf in EUR" as IND.AZS.Verkaufte.Finanzreserven.Einzelverkauf.in.EUR
FROM [lib://QVD (vnppbw1wt201_qsadmin)/_Processed_Data/IND_Auszahlungsstatistik.qvd]
(qvd);



// [IND.KBUE]:
// LOAD
//     Buchungsstelle,
//     Investmentlösung,
//     Name,
//     "Kundennummer DZPB",
//     "Konto-
// nummer
// VRB",
//     "Depot-
// nummer
// VRB",
//     "Personennummer VRB",
//     "Start Kunde",
//     "VV Profil",
//     "VV Art",
//     "Fee in %",
//     "Betreuer DZPB",
//     BLZ,
//     "Filial-Nr.",
//     "Betreuer-Nr.",
//     Betreuer,
//     Leistungskonstellation,
//     Vergütungssatz,
//     Vergütungsform,
//     "Kunde ist aktiv",
//     "Kunde ist aktiv2",
//     "Zugang
// aktuelles
// Jahr",
//     "Abgang
// aktuelles
// Jahr",
//     Geschäftsvolumen,
//     AuM,
//     "Mittelzufluss Januar",
//     "Mittelzufluss Februar",
//     "Mittelzufluss März",
//     "Mittelzufluss April",
//     "Mittelzufluss Mai",
//     "Mittelzufluss Juni",
//     "Mittelzufluss Juli",
//     "Mittelzufluss August",
//     "Mittelzufluss September",
//     "Mittelzufluss Oktober",
//     "Mittelzufluss November",
//     "Mittelzufluss Dezember",
//     "Mittelzufluss
// kumuliert aktuelles Jahr",
//     "Mittelabfluss Januar",
//     "Mittelabfluss Februar",
//     "Mittelabfluss März",
//     "Mittelabfluss April",
//     "Mittelabfluss Mai",
//     "Mittelabfluss Juni",
//     "Mittelabfluss Juli",
//     "Mittelabfluss August",
//     "Mittelabfluss September",
//     "Mittelabfluss Oktober",
//     "Mittelabfluss November",
//     "Mittelabfluss Dezember",
//     "Mittelabfluss
// kumuliert aktuelles Jahr",
//     "Mittelfluss Netto kumuliert aktuelles Jahr",
//     "Gesamtnetto-Vergütung ohne Top-Bonus",
//     "davon laufende Gesamtnetto-Vergütung",
//     "davon einmalige Gesamtnetto-Vergütung",
//     "Hochrechnung Gesamtnetto-Vergütung zum Jahresultimo ohne Top-Bonus",
//     "Hochrechnung Top-Bonus zum Jahresultimo",
//     "Performance
// YTD in %",
//     BG,
//     BH,
//     BI
// FROM [lib://manuell (vnppbw1wt201_qsadmin)/Master_Datei.xlsx]
// (ooxml, embedded labels, table is KBÜ);


// [IND.KBZ]:

// LOAD
//     Buchungsstelle as IND.KBZ.Buchungsstelle,
//     Investmentlösung  as IND.KBZ.Investmentlösung,
//     Name as IND.KBZ.Name,
//     "Kundennummer DZPB" as IND.KBZ.Kundennummer.DZPB,
//     "Kontonummer VRB" as IND.KBZ.Kontonummer.VRB,
//     "Depotnummer VRB" as IND.KBZ.Depotnummer.VRB,
//     "Personennummer VRB" as IND.KBZ.Personennummer.VRB,
//     "NEU: Personennummer VRB" as IND.KBZ.Personenummer.VRB.neu,
//     "Filial-Nr." as IND.KBZ.Filial.Nr.,
//     "NEU: Filial-Nr." as IND.KBZ.Filiale.Nr.neu,
//     "Betreuer-Nr." as IND.KBZ.Betreuer.Nr,
//     "NEU: Betreuer-Nr." as IND.KBZ.Betreuer.Nr.neu,
//     Betreuer as IND.KBZ.Bertreuer,
//     "Kunde ist aktiv" as IND.KBZ.Kunde.ist.aktiv
    
// FROM [lib://manuell (vnppbw1wt201_qsadmin)/Master_Datei.xlsx]
// (ooxml, embedded labels, table is KBZ);



[IND.010.RuV.Alle.ProvAbrechdaten]:

LOAD
//  	AutoNumberHash256	(
// //     Applymap('MapRuVAgenturNrMitBeraterNr', vermittelnde_agt, '-9999999999'),
// //	   num(vermittelnde_agt),
// 	   num(kundennummer),												// Verknüpfung zu "VKN R+V" in der Haupttabelle -> 17. Mai 2023
// 	   year(Date(Monthend(MakeDate(jahr, monat, 1)),'DD.MM.YYYY')), 
//        month(Date(Monthend(MakeDate(jahr, monat, 1)),'DD.MM.YYYY')))
       
//        as  ANH##VKN.RuV#Join,  // Primary Key manuelle Datei und Orgastruktur
    
    
    
//      	AutoNumberHash256	(
// //     Applymap('MapRuVAgenturNrMitBeraterNr', vermittelnde_agt, '-9999999999'),
// //	   num(vermittelnde_agt),
// 	   Applymap('Map.KundeHTausVKN.RuV',num(kundennummer),'-9999999999'),												// Verknüpfung zu "VKN R+V" in der Haupttabelle -> 17. Mai 2023
// 	   year(Date(Monthend(MakeDate(jahr, monat, 1)),'DD.MM.YYYY')), 
//        month(Date(Monthend(MakeDate(jahr, monat, 1)),'DD.MM.YYYY')))
       
//            as ANH#Personennummer#Join,  // Primary Key manuelle Datei und Orgastruktur
           
           
           
              	 AutoNumberHash256(
     if(num(kundennummer)=0 or isnull(kundennummer),'9876543210',
     	Applymap('Map.KundeHTausVKN.RuV.AKT',num(kundennummer),     
     	Applymap('Map.KundeHTausVKN.RuV',num(kundennummer),'9876543210'))),
	 		year(Date(Monthend(MakeDate(jahr, monat, 1)),'DD.MM.YYYY')), 
     		month(Date(Monthend(MakeDate(jahr, monat, 1)),'DD.MM.YYYY'))) 
     as ANH#Personennummer#Join,     
           
           
    
//	if(num(kundennummer)=0 or isnull(kundennummer),'9876543210',num(kundennummer))

//      	AutoNumberHash256	(
// 	   Applymap('Map.KundeHTausVKN.RuV',if(num(kundennummer)=0 or isnull(kundennummer),'9876543210',num(kundennummer)),'9876543210'),												// Verknüpfung zu "VKN R+V" in der Haupttabelle -> 17. Mai 2023
// 	   year(Date(Monthend(MakeDate(jahr, monat, 1)),'DD.MM.YYYY')), 
//        month(Date(Monthend(MakeDate(jahr, monat, 1)),'DD.MM.YYYY')))
       
//            as ANH#Personennummer#Join,  // Primary Key manuelle Datei und Orgastruktur
    
    
// //    	vermittelnde_agt as  ##STM.ORGA1#IND.010.RuV,  // Primary Key manuelle Datei und Orgastruktur
    
    
       num(vermittelnde_agt) as IND.010.RuV.vermittelnde_agt,
//     auszahlagentur as IND.010.RuV.auszahlagentur,
//     s_agt as IND.010.RuV.s_agt,
//     agenturnummer as IND.010.RuV.agenturnummer,
//     agt_art as IND.010.RuV.agt_art,
//     agenturname as IND.010.RuV.agenturname,
//     Applymap ('MapRuVAgenturNrMitBeraterNr', vermittelnde_agt, '-9999999999') as IND.010.RuV.vermittelnde_agt.Kundenberater,
//     buch_agt as IND.010.RuV.buch_agt,
     	jahr as IND.010.RuV.jahr,
     	monat as IND.010.RuV.monat,
    	satzart_1 as IND.010.RuV.satzart_1,
    	satzart_2 as IND.010.RuV.satzart_2,
//     typ as IND.010.RuV.typ,
//     grund as IND.010.RuV.grund,
//     sparte as IND.010.RuV.sparte,
//     vis_sparte_nr as IND.010.RuV.vis_sparte_nr,
    	arbeitsgebiet as IND.010.RuV.arbeitsgebiet,
     vsnr  as IND.010.RuV.vsnr,
//     sparte_tarif as IND.010.RuV.sparte_tarif,
//     bewegungsart as IND.010.RuV.bewegungsart,
//     ausz_modell as IND.010.RuV.ausz_modell,
	    betrag as IND.010.RuV.betrag,
    	keza_146 as IND.010.RuV.keza_146,
    	keza_56 as IND.010.RuV.keza_56,
//     beitrag as IND.010.RuV.beitrag,
//     pp_rel_beitrag as IND.010.RuV.pp_rel_beitrag,
//     bewertungsfaktor as IND.010.RuV.bewertungsfaktor,
//     prov_zahldauer as IND.010.RuV.prov_zahldauer,
//     produktfaktor as IND.010.RuV.produktfaktor,
//     netto_praemie as IND.010.RuV.netto_praemie,
//     brutto_praemie as IND.010.RuV.brutto_praemie,
//     antragsdatum as IND.010.RuV.antragsdatum,
    
    //beginn as IND.010.RuV.beginn,
    	Date(Monthend(MakeDate(jahr, monat, 1)),'DD.MM.YYYY') as IND.010.RuV.Stichtag,
   		MonthEnd( date(alt(beginn,Date#(beginn,'YYYY-MM-DD'),Date#(beginn,'MM-DD-YYYY'),Date#(beginn,'DD/MM/YYYY'),Date#(beginn,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.010.RuV.MonthEnd,
        date(alt(beginn,Date#(beginn,'YYYY-MM-DD'),Date#(beginn,'MM-DD-YYYY'),Date#(beginn,'DD/MM/YYYY'),Date#(beginn,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.010.RuV.beginn,
    	year( date(alt(beginn,Date#(beginn,'YYYY-MM-DD'),Date#(beginn,'MM-DD-YYYY'),Date#(beginn,'DD/MM/YYYY'),Date#(beginn,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.010.RuV.beginn.Jahr,
    	month( date(alt(beginn,Date#(beginn,'YYYY-MM-DD'),Date#(beginn,'MM-DD-YYYY'),Date#(beginn,'DD/MM/YYYY'),Date#(beginn,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.010.RuV.beginn.Monat,
    
//     wirkdatum as IND.010.RuV.wirkdatum,
     produktname as IND.010.RuV.produktname,
//     stornogrund as IND.010.RuV.stornogrund,
//     unverd_prov_storno as IND.010.RuV.unverd_prov_storno,
//     avo_kennzeichen as IND.010.RuV.avo_kennzeichen,
//     beteiligungsgrad as IND.010.RuV.beteiligungsgrad,
//     zahlungsweise as IND.010.RuV.zahlungsweise,
//     versicherungsdauer as IND.010.RuV.versicherungsdauer,
//     beitragszahldauer as IND.010.RuV.beitragszahldauer,
       AutoNumberHash256(num(kundennummer)) as IND.010.RuV.kundennummer
//     anredetext as IND.010.RuV.anredetext,
//      nachname_vn as IND.010.RuV.nachname_vn,
//      vorname_vn as IND.010.RuV.vorname_vn
//     str as IND.010.RuV.str,
//     postfach as IND.010.RuV.postfach,
//     postfach_plz as IND.010.RuV.postfach_plz,
//     postleitzahl as IND.010.RuV.postleitzahl,
//     ort as IND.010.RuV.ort,
//     geburtsdatum as IND.010.RuV.geburtsdatum,
//     iban_vn as IND.010.RuV.iban_vn,
//     bic_vn as IND.010.RuV.bic_vn,
//     bankleitzahl_vn as IND.010.RuV.bankleitzahl_vn,
//     konto_vn as IND.010.RuV.konto_vn,
//     kdnr_vt as IND.010.RuV.kdnr_vt,
//     versicherte_person as IND.010.RuV.versicherte_person,
//     kdnr_vers_tr as IND.010.RuV.kdnr_vers_tr,
//     versicherungstraeger as IND.010.RuV.versicherungstraeger,
//     produktart as IND.010.RuV.produktart,
//     d_laufzeit as IND.010.RuV.d_laufzeit,
//     effek_provsatz as IND.010.RuV.effek_provsatz,
//     maximierungs_kz as IND.010.RuV.maximierungs_kz,
//     versicherungsart as IND.010.RuV.versicherungsart,
//     provgruppe_rva as IND.010.RuV.provgruppe_rva,
//     vr_control_grp as IND.010.RuV.vr_control_grp,
//     blz_agentur as IND.010.RuV.blz_agentur,
//     bank_mitarbeiter as IND.010.RuV.bank_mitarbeiter,
//     ktr_buch_sparte as IND.010.RuV.ktr_buch_sparte,
//     ktr_bezei as IND.010.RuV.ktr_bezei,
//     kategorie  as IND.010.RuV.kategorie,
//     grp_svv_nummer as IND.010.RuV.grp_svv_nummer,
//     aktionsnummer as IND.010.RuV.aktionsnummer,
//     gsch_bil as IND.010.RuV.gsch_bil,
//     poltyp_nr as IND.010.RuV.poltyp_nr,
//     reserve_1 as IND.010.RuV.reserve_1,
//     lvrg_tranche as IND.010.RuV.lvrg_tranche,
//     reserve_3 as IND.010.RuV.reserve_3 ,
//     reserve_4 as IND.010.RuV.reserve_4,
//     ums_steuer_kz as IND.010.RuV.ums_steuer_kz
    
FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_010_Bericht_RuV.qvd]
(qvd);




/*


[IND.SFN.SmartFinanz.Neugeschäft]:

LOAD
	MITARBEITER_GENO_ID as ##STM.ORGA1#IND.SFN,				// Primary Key manuelle Datei und Orgastruktur
    

    VERTRAGS__ID as IND.SFN.VERTRAGS__ID,
    VERTRAGSNUMMER as IND.SFN.VERTRAGSNUMMER,
    RAHMEN_ID_FLEX as IND.SFN.RAHMEN_ID_FLEX,
    VERTRAGSTYP as IND.SFN.VERTRAGSTYP,
    PRODUKT as IND.SFN.PRODUKT,
    KUNDENNR as IND.SFN.KUNDENNR,
    KUNDENNAME as IND.SFN.KUNDENNAME,
    UEVP_NR as IND.SFN.UEVP_NR,
    BLZ as IND.SFN.BLZ,
    FIRMA as IND.SFN.FIRMA,
    MITARBEITERNAME as IND.SFN.MITARBEITERNAME,
    Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999') as IND.SFN.MITARBEITER_GENO_ID,
    LOB as IND.SFN.LOB,
    GESCHAEFTSART_ANFRAGE as IND.SFN.GESCHAEFTSART_ANFRAGE,
    GESCHAEFTSART_ENDABRECHNUNG as IND.SFN.GESCHAEFTSART_ENDABRECHNUNG,
    ANFRAGE_DATUM as IND.SFN.ANFRAGE_DATUM,
    ANFRAGE_VOLUMEN as IND.SFN.ANFRAGE_VOLUMEN,
    ENTSCHEIDUNG_DATUM as IND.SFN.ENTSCHEIDUNG_DATUM,
    ENTSCHEIDUNG as IND.SFN.ENTSCHEIDUNG,
    ANFRAGE_STORNO_DATUM as IND.SFN.ANFRAGE_STORNO_DATUM,
    VERTRAGSZUGANG_DATUM as IND.SFN.VERTRAGSZUGANG_DATUM,
    RAHMENAKTIVIERUNG_FLEXIBEL_DATUM as IND.SFN.RAHMENAKTIVIERUNG_FLEXIBEL_DATUM,
    RAHMENSCHLIESSUNG_FLEXIBEL_DATUM as IND.SFN.RAHMENSCHLIESSUNG_FLEXIBEL_DATUM,
    ENDABRECHNUNG_VOLUMEN as IND.SFN.ENDABRECHNUNG_VOLUMEN,
    //ENDABRECHNUNG_DATUM as IND.SFN.ENDABRECHNUNG_DATUM,
    date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.SFN.ENDABRECHNUNG_DATUM,
    year(date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.ENDABRECHNUNG_DATUM.Jahr,
    Month(date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.ENDABRECHNUNG_DATUM.Monat,
    AUFSTOCKUNG_FLEXIBEL_VOLUMEN as IND.SFN.AUFSTOCKUNG_FLEXIBEL_VOLUMEN,
    //AUFSTOCKUNG_FLEXIBEL_DATUM as IND.SFN.AUFSTOCKUNG_FLEXIBEL_DATUM,
    date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.SFN.AUFSTOCKUNG_FLEXIBEL_DATUM,
    year(date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.AUFSTOCKUNG_FLEXIBEL_DATUM.Jahr,
    Month(date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.AUFSTOCKUNG_FLEXIBEL_DATUM.Monat,
    ZUSATZLIQUIDITAET_FLEXIBEL_VOL as IND.SFN.ZUSATZLIQUIDITAET_FLEXIBEL_VOL,
    //ZUSATZLIQUIDITAET_FLEXIBEL_DATUM as IND.SFN.ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,
	date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.SFN.ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,   
    year(date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.ZUSATZLIQUIDITAET_FLEXIBEL_DATUM.Jahr,
    month(date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.ZUSATZLIQUIDITAET_FLEXIBEL_DATUM.Monat,
    ENDABRECHNUNG_STORNO as IND.SFN.ENDABRECHNUNG_STORNO,
    VERTRAGSLAUFZEIT_BEGINN as IND.SFN.VERTRAGSLAUFZEIT_BEGINN,
    VERTRAGSLAUFZEIT_ENDE as IND.SFN.VERTRAGSLAUFZEIT_ENDE,
    GESAMTLAUFZEIT as IND.SFN.GESAMTLAUFZEIT,
    RESTLAUFZEIT as IND.SFN.RESTLAUFZEIT,
    VERTRAGSSALDO as IND.SFN.VERTRAGSSALDO,
    KUNDENZINS as IND.SFN.KUNDENZINS,
    RSP_STORNIERUNGSKENNZEICHEN as IND.SFN.RSP_STORNIERUNGSKENNZEICHEN,
    RSP_VERSICHERUNGSBEGINN as IND.SFN.RSP_VERSICHERUNGSBEGINN,
    RSP_VERSICHERUNGSENDE as IND.SFN.RSP_VERSICHERUNGSENDE,
    RSP_VERSICHERUNGSENDE_IST as IND.SFN.RSP_VERSICHERUNGSENDE_IST,
    RSP_Provisionsturnus as IND.SFN.RSP_Provisionsturnus,
    RSP_TOD as IND.SFN.RSP_TOD,
    RSP_TOD_PROVISION as IND.SFN.RSP_TOD_PROVISION,
    RSP_AU as IND.SFN.RSP_AU,
    RSP_AU_PROVISION as IND.SFN.RSP_AU_PROVISION,
    RSP_ALS as IND.SFN.RSP_ALS,
    RSP_ALS_PROVISION as IND.SFN.RSP_ALS_PROVISION,
    IBAN_Kunde as IND.SFN.IBAN_Kunde,
    Vertriebskanal as IND.SFN.Vertriebskanal

FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_SmartFinanz_Neugeschäft.qvd]
(qvd);


*/





[IND.SFN.EAR.SmartFinanz.Neugeschäft.Endabrechnung]:

LOAD
// 	AutoNumberHash256(
//     //Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999'), 
//     num(KUNDENNR),
//     year(date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')))
//      as ANH##VKN.SmartFinanz#Join,				// Primary Key manuelle Datei und Orgastruktur
    


// 	AutoNumberHash256(
//     //Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999'), 
//     Applymap('Map.KundeHTausVKN.SmartFinanz',num(KUNDENNR),'-9999999999'),
//     year(date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')))
//          as ANH#Personennummer#Join,				// Primary Key manuelle Datei und Orgastruktur
     


    
  AutoNumberHash256(
     if(num(KUNDENNR)=0 or isnull(KUNDENNR),'9876543210',
     	Applymap('Map.KundeHTausVKN.SmartFinanz.AKT',num(KUNDENNR),     
     	Applymap('Map.KundeHTausVKN.SmartFinanz',num(KUNDENNR),'9876543210'))),
	 		year(date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
     		month(date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')))
     			as ANH#Personennummer#Join,



//     VERTRAGS__ID as IND.SFN.EAR.VERTRAGS__ID,
//     VERTRAGSNUMMER as IND.SFN.EAR.VERTRAGSNUMMER,
//     RAHMEN_ID_FLEX as IND.SFN.EAR.RAHMEN_ID_FLEX,
//     VERTRAGSTYP as IND.SFN.EAR.VERTRAGSTYP,
//     PRODUKT as IND.SFN.EAR.PRODUKT,
     AutoNumberHash256(num(KUNDENNR)) as IND.SFN.EAR.KUNDENNR,
//     KUNDENNAME as IND.SFN.EAR.KUNDENNAME,
//     UEVP_NR as IND.SFN.EAR.UEVP_NR,
//     BLZ as IND.SFN.EAR.BLZ,
//     FIRMA as IND.SFN.EAR.FIRMA,
//     MITARBEITERNAME as IND.SFN.EAR.MITARBEITERNAME,
//     Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999') as IND.SFN.EAR.MITARBEITER_GENO_ID,
		MITARBEITER_GENO_ID as IND.SFN.EAR.MITARBEITER_GENO_ID,
//     LOB as IND.SFN.EAR.LOB,
//     GESCHAEFTSART_ANFRAGE as IND.SFN.EAR.GESCHAEFTSART_ANFRAGE,
//     GESCHAEFTSART_ENDABRECHNUNG as IND.SFN.EAR.GESCHAEFTSART_ENDABRECHNUNG,
    ENDABRECHNUNG_VOLUMEN as IND.SFN.EAR.ENDABRECHNUNG_VOLUMEN,
    //ENDABRECHNUNG_DATUM as IND.SFN.ENDABRECHNUNG_DATUM,
    date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.SFN.EAR.ENDABRECHNUNG_DATUM,
     year(date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.EAR.ENDABRECHNUNG_DATUM.Jahr,
     Month(date(alt(ENDABRECHNUNG_DATUM,Date#(ENDABRECHNUNG_DATUM,'YYYY-MM-DD'),Date#(ENDABRECHNUNG_DATUM,'MM-DD-YYYY'),Date#(ENDABRECHNUNG_DATUM,'DD/MM/YYYY'),Date#(ENDABRECHNUNG_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.EAR.ENDABRECHNUNG_DATUM.Monat
//     ENDABRECHNUNG_STORNO as IND.SFN.EAR.ENDABRECHNUNG_STORNO
   

// FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_SmartFinanz_Neugeschäft.qvd]
// (qvd);

FROM [lib://constant (vnppbw1wt201_qsadmin)/SmartFinanz_Neugeschäft.xlsx]
(ooxml, embedded labels);







[IND.SFN.ASF.SmartFinanz.Neugeschäft.Aufstockung.Flexibel]:

LOAD
// 	AutoNumberHash256(
//     //Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999'), 
//     num(KUNDENNR),
//     year(date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')))
//     as ANH##VKN.SmartFinanz#Join,				// Primary Key manuelle Datei und Orgastruktur
    
    
    
//     	AutoNumberHash256(
//     //Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999'), 
//     Applymap('Map.KundeHTausVKN.SmartFinanz',num(KUNDENNR),'-9999999999'),
//     year(date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')))
//         as ANH#Personennummer#Join,				// Primary Key manuelle Datei und Orgastruktur
    
   
   
     AutoNumberHash256(
     if(num(KUNDENNR)=0 or isnull(KUNDENNR),'9876543210',
     	Applymap('Map.KundeHTausVKN.SmartFinanz.AKT',num(KUNDENNR),     
     	Applymap('Map.KundeHTausVKN.SmartFinanz',num(KUNDENNR),'9876543210'))),
	 		year(date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
     		month(date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')))
     			as ANH#Personennummer#Join,
   
    

//     VERTRAGS__ID as IND.SFN.ASF.VERTRAGS__ID,
//     VERTRAGSNUMMER as IND.SFN.ASF.VERTRAGSNUMMER,
//     RAHMEN_ID_FLEX as IND.SFN.ASF.RAHMEN_ID_FLEX,
//     VERTRAGSTYP as IND.SFN.ASF.VERTRAGSTYP,
//     PRODUKT as IND.SFN.ASF.PRODUKT,
//     num(KUNDENNR) as IND.SFN.ASF.KUNDENNR,
//     KUNDENNAME as IND.SFN.ASF.KUNDENNAME,
//     UEVP_NR as IND.SFN.ASF.UEVP_NR,
//     BLZ as IND.SFN.ASF.BLZ,
//     FIRMA as IND.SFN.ASF.FIRMA,
//     MITARBEITERNAME as IND.SFN.ASF.MITARBEITERNAME,
//	  Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999') as IND.SFN.ASF.MITARBEITER_GENO_ID,
	MITARBEITER_GENO_ID as IND.SFN.ASF.MITARBEITER_GENO_ID,
//     LOB as IND.SFN.ASF.LOB,
//     GESCHAEFTSART_ANFRAGE as IND.SFN.ASF.GESCHAEFTSART_ANFRAGE,
//     GESCHAEFTSART_ENDABRECHNUNG as IND.SFN.ASF.GESCHAEFTSART_ENDABRECHNUNG,
    AUFSTOCKUNG_FLEXIBEL_VOLUMEN as IND.SFN.ASF.AUFSTOCKUNG_FLEXIBEL_VOLUMEN,
//     //ENDABRECHNUNG_DATUM as IND.SFN.ENDABRECHNUNG_DATUM,
    date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.SFN.ASF.AUFSTOCKUNG_FLEXIBEL_DATUM,
    year(date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.ASF.AUFSTOCKUNG_FLEXIBEL_DATUM.Jahr,
    Month(date(alt(AUFSTOCKUNG_FLEXIBEL_DATUM,Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(AUFSTOCKUNG_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.ASF.AUFSTOCKUNG_FLEXIBEL_DATUM.Monat
//     ENDABRECHNUNG_STORNO as IND.SFN.ASF.ENDABRECHNUNG_STORNO
   

// FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_SmartFinanz_Neugeschäft.qvd]
// (qvd);

FROM [lib://constant (vnppbw1wt201_qsadmin)/SmartFinanz_Neugeschäft.xlsx]
(ooxml, embedded labels);



[IND.SFN.ZLF.SmartFinanz.Neugeschäft.Zusatzliquidität.Flexibel]:

LOAD
// 	AutoNumberHash256(
//     //Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999'), 
//     num(KUNDENNR),
//     year(date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
//     as ANH##VKN.SmartFinanz#Join,				// Primary Key manuelle Datei und Orgastruktur
    
    
    
    
//     	AutoNumberHash256(
//     //Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999'), 
//     Applymap('Map.KundeHTausVKN.SmartFinanz',num(KUNDENNR),'-9999999999'),
//     year(date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
//         as ANH#Personennummer#Join,				// Primary Key manuelle Datei und Orgastruktur
    


     AutoNumberHash256(
     if(num(KUNDENNR)=0 or isnull(KUNDENNR),'9876543210',
     	Applymap('Map.KundeHTausVKN.SmartFinanz.AKT',num(KUNDENNR),     
     	Applymap('Map.KundeHTausVKN.SmartFinanz',num(KUNDENNR),'9876543210'))),
	 		year(date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
     		month(date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')))
     			as ANH#Personennummer#Join,



//     VERTRAGS__ID as IND.SFN.ZLF.VERTRAGS__ID,
//     VERTRAGSNUMMER as IND.SFN.ZLF.VERTRAGSNUMMER,
//     RAHMEN_ID_FLEX as IND.SFN.ZLF.RAHMEN_ID_FLEX,
//     VERTRAGSTYP as IND.SFN.ZLF.VERTRAGSTYP,
//     PRODUKT as IND.SFN.ZLF.PRODUKT,
       AutoNumberHash256(num(KUNDENNR)) as IND.SFN.ZLF.KUNDENNR,
//     KUNDENNAME as IND.SFN.ZLF.KUNDENNAME,
//     UEVP_NR as IND.SFN.ZLF.UEVP_NR,
//     BLZ as IND.SFN.ZLF.BLZ,
//     FIRMA as IND.SFN.ZLF.FIRMA,
//     MITARBEITERNAME as IND.SFN.ZLF.MITARBEITERNAME,
//  	  Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999') as IND.SFN.ZLF.MITARBEITER_GENO_ID,
		MITARBEITER_GENO_ID as IND.SFN.ZLF.MITARBEITER_GENO_ID,
//     LOB as IND.SFN.ZLF.LOB,
//     GESCHAEFTSART_ANFRAGE as IND.SFN.ZLF.GESCHAEFTSART_ANFRAGE,
//     GESCHAEFTSART_ENDABRECHNUNG as IND.SFN.ZLF.GESCHAEFTSART_ENDABRECHNUNG,
    ZUSATZLIQUIDITAET_FLEXIBEL_VOL as IND.SFN.ZLF.ZUSATZLIQUIDITAET_FLEXIBEL_VOL,
    //ENDABRECHNUNG_DATUM as IND.SFN.ENDABRECHNUNG_DATUM,
    date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.SFN.ZLF.ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,
    year(date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.ZLF.ZUSATZLIQUIDITAET_FLEXIBEL_DATUM.Jahr,
    month(date(alt(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'YYYY-MM-DD'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM-DD-YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'DD/MM/YYYY'),Date#(ZUSATZLIQUIDITAET_FLEXIBEL_DATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SFN.ZLF.ZUSATZLIQUIDITAET_FLEXIBEL_DATUM.Monat
//     ENDABRECHNUNG_STORNO as IND.SFN.ZLF.ENDABRECHNUNG_STORNO
   

// FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_SmartFinanz_Neugeschäft.qvd]
// (qvd);

FROM [lib://constant (vnppbw1wt201_qsadmin)/SmartFinanz_Neugeschäft.xlsx]
(ooxml, embedded labels);





[IND.AFS.Anfragestatistik]:

LOAD

	autonumberhash256(
	Benutzerkennung , 
     year(date(alt(Stichtag,Date#(Stichtag,'YYYY-MM-DD'),Date#(Stichtag,'MM-DD-YYYY'),Date#(Stichtag,'DD/MM/YYYY'),Date#(Stichtag,'MM/DD/YYYY')),'DD.MM.YYYY')) ,
      month(date(alt(Stichtag,Date#(Stichtag,'YYYY-MM-DD'),Date#(Stichtag,'MM-DD-YYYY'),Date#(Stichtag,'DD/MM/YYYY'),Date#(Stichtag,'MM/DD/YYYY')),'DD.MM.YYYY'))) as 
    
    ##STM.ORGA1#IND.AFS,
    

// 	Applymap('MapEasyCreditMitBerater', Benutzerkennung, '-9999999999') as IND.AFS.Benutzerkennung.Kundenberater,
    
    date(alt(Stichtag,Date#(Stichtag,'YYYY-MM-DD'),Date#(Stichtag,'MM-DD-YYYY'),Date#(Stichtag,'DD/MM/YYYY'),Date#(Stichtag,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.AFS.Stichtag,
     year(date(alt(Stichtag,Date#(Stichtag,'YYYY-MM-DD'),Date#(Stichtag,'MM-DD-YYYY'),Date#(Stichtag,'DD/MM/YYYY'),Date#(Stichtag,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.AFS.Stichtag.Jahr,
     month(date(alt(Stichtag,Date#(Stichtag,'YYYY-MM-DD'),Date#(Stichtag,'MM-DD-YYYY'),Date#(Stichtag,'DD/MM/YYYY'),Date#(Stichtag,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.AFS.Stichtag.Monat,
//     "Name Vertriebsstelle" as IND.AFS.Name.Vertriebsstelle,
//     Vertriebskanal as IND.AFS.Vertriebskanal,
    AutoNumberHash256(Benutzerkennung) as IND.AFS.Benutzerkennung,
//     Mitarbeiter as IND.AFS.Mitarbeiter,
//    // "Kundenanfragen in StÃ¼ck" as IND.AFS.Kundenanfragen.in.Stück,
//    // "Kundenanfragen in %" as IND.AFS.Kundenanfragen.in.%,
//     "Kundenanfragen in EUR" as IND.AFS.Kundenanfragen.in.EUR,
//     "Kreditentscheidung grÃ¼n easyCredit in StÃ¼ck" as IND.AFS.Kreditentscheidung.grün.easyCredit.in.Stück,
//     "Kundenkreditentscheidung rot in StÃ¼ck" as IND.AFS.Kundenkreditentscheidung.rot.in.Stück,
//     "Kundenkreditentscheidung rot in EUR" as IND.AFS.Kundenkreditentscheidung.rot.in.EUR,
//     "GrÃ¼nquote easyCredit in %" as IND.AFS.Grünquote.easyCredit.in.%,
//     "Kundenkreditentscheidung rot in %" as IND.AFS.Kundenkreditentscheidung.rot.in.%,
//     "Kreditentscheidung grÃ¼n eC in EUR" as IND.AFS.Kreditentscheidung.grün.eC.in.EUR,
//     "Gesamtkreditvolumen in EUR" as IND.AFS.Gesamtkreditvolumen.in.EUR,
//     "Maximalkreditauslastung Kreditentscheidungen grÃ¼n in %" as IND.AFS.Maximalkreditauslastung.Kreditentscheidungen.grün.in.%,
//     "Auszahlung in StÃ¼ck" as IND.AFS.Auszahlung.in.Stück,
//     "Auszahlung in %" as IND.AFS.Auszahlung.in.%,
//     "Auszahlung in EUR" as IND.AFS.Auszahlung.in.EUR,
//     "Maximalkreditauslastung Auszahlung in %" as IND.AFS.Maximalkreditauslastung.Auszahlung.in.%,
//     "Kreditentscheidung grÃ¼n Finanzreserve verkaufbar in StÃ¼ck" as IND.AFS.Kreditentscheidung.grün.Finanzreserve.verkaufbar.in.Stück,
//     "Kreditentscheidung grÃ¼n Finanzreserve verkaufbar in EUR" as IND.AFS.Kreditentscheidung.grün.Finanzreserve.verkaufbar.in.EUR,
//     "Kreditentscheidung grÃ¼n Finanzreserve Kombiverkauf verkaufbar in StÃ¼ck" as IND.AFS.Kreditentscheidung.grün.Finanzreserve.Kombiverkauf.verkaufbar.in.Stück,
//     "Kreditentscheidung grÃ¼n Finanzreserve Kombiverkauf verkaufbar in EUR" as IND.AFS.Kreditentscheidung.grün.Finanzreserve.Kombiverkauf.verkaufbar.in.EUR,
//     "Kreditentscheidung grÃ¼n Finanzreserve Einzelverkauf verkaufbar in StÃ¼ck" as IND.AFS.Kreditentscheidung.grün.Finanzreserve.Einzelverkauf.verkaufbar.in.Stück,
//     "Kreditentscheidung grÃ¼n Finanzreserve Einzelverkauf verkaufbar in EUR" as IND.AFS.Kreditentscheidung.grün.Finanzreserve.Einzelverkauf.verkaufbar.in.EUR,
//     "Einzelverkaufsquote Finanzreserve" as IND.AFS.Einzelverkaufsquote.Finanzreserve,
//     "verkaufte Finanzreserve in StÃ¼ck" as IND.AFS.verkaufte.Finanzreserve.in.Stück,
//     "Verkaufte Finanzreserve Kombiverkauf in StÃ¼ck" as IND.AFS.Verkaufte.Finanzreserve.Kombiverkauf.in.Stück,
//     "Verkaufte Finanzreserve Einzelverkauf in StÃ¼ck" as IND.AFS.Verkaufte.Finanzreserve.Einzelverkauf.in.Stück,
//     "verkaufte Finanzreserve in EUR" as IND.AFS.verkaufte.Finanzreserve.in.EUR,
//     "Verkaufte Finanzreserve Kombiverkauf in EUR" as IND.AFS.Verkaufte.Finanzreserve.Kombiverkauf.in.EUR,
//     "Verkaufte Finanzreserve Einzelverkauf in EUR" as IND.AFS.Verkaufte.Finanzreserve.Einzelverkauf.in.EUR,
//     "Verkaufsquote Finanzreserve in %" as IND.AFS.Verkaufsquote.Finanzreserve.in.%,
//     "Verkaufsquote Finanzreserve Kombiverkauf in %" as IND.AFS.Verkaufsquote.Finanzreserve.Kombiverkauf.in.%,
//     "Verkaufsquote Finanzreserve Einzelverkauf in %" as IND.AFS.Verkaufsquote.Finanzreserve.Einzelverkauf.in.%,
//     "noline Kanalwechsel" as IND.AFS.noline.Kanalwechsel,
    "Qualifizierte Kundenanfragen in StÃ¼ck" as IND.AFS.Qualifizierte.Kundenanfragen.in.Stück
//     "Qualifizierte Kundenanfragen in %" as IND.AFS.Qualifizierte.Kundenanfragen.in.%
FROM [lib://Processed_Data (vnppbw1wt201_qsadmin)/IND_Anfragestatistik.qvd]
(qvd);





/*		WARUM IST DAS DOPPELT DRIN??? -> KOMMENTAR EMRE AM 12. Dez. 2022

[IND.Auszahl.Einzel]:
LOAD
    Vertragspartnername as IND.Auszahl.Vertragspartnername,
    Vertragspartnernummer as IND.Auszahl.Vertragspartnernummer,
    "Name Vertriebsstelle" as IND.Auszahl.Vertriebsstelle.Name,
    "Nr. Vertriebsstelle" as IND.Auszahl.Vertriebsstelle.Nr.,
    Vertriebskanal as IND.Auszahl.Vertriebskanal,
    Benutzerkennung as IND.Auszahl.Benutzerkennung,
    Mitarbeiter as IND.Auszahl.Mitarbeiter,
    Antragsnummer as IND.Auszahl.Antragsnummer,
    Anfragedatum as IND.Auszahl.Anfragedatum,
    Auszahlungsdatum as IND.Auszahl.Auszahlungsdatum,
    "NeugeschÃ¤ft in EUR" as IND.Auszahl.Neugeschäft.in.EUR,
    "NeugeschÃ¤ft in StÃ¼ck" as IND.Auszahl.Neugeschäft.Stück,
    Kontonummer as IND.Auszahl.Kontonummer,
    Darlehensnehmer,
    "Anzahl Darlehensnehmer",
    "Schutzbrief-Tarif Darlehensnehmer 1",
    "Schutzbrief-Tarif Darlehensnehmer 2",
    "Schutzbrief-Beitrag",
    Produktvariante,
    "Verkaufsvariante Finanzreserve",
    "Produktpakete easyCredit",
    "Verkaufte Finanzreserve in EUR",
    "Aktivierungswert Finanzreserve in EUR",
    "Schutzbrief-Tarif Finanzreserve",
    Mitgliedervorteil,
    "KomplettablÃ¶sung Ratenkredite ohne Finanzreserve",
    "KomplettablÃ¶sung Ratenkredite mit Finanzreserve",
    "Status Mitgliedervorteil",
    "Personal-Nr",
    "noline Kanalwechsel",
    "FremdablÃ¶se gesamt mÃ¶glich in TEUR",
    "davon FremdablÃ¶se nicht abgelÃ¶st in TEUR",
    "FremdablÃ¶se Ratenkredit nicht abgelÃ¶st in TEUR",
    "FremdablÃ¶se Rahmenkredit nicht abgelÃ¶st in TEUR",
    "FremdablÃ¶se Girokonto nicht abgelÃ¶st in TEUR",
    "FremdablÃ¶se Kreditkarte nicht abgelÃ¶st in TEUR",
    "EC Finanzreserve mÃ¶glich in EUR",
    "Versandart KUP Zugangsdaten",
    Zinsflexibilisierung,
    "Kundennummer PB",
    "Verkaufte Finanzreserven Kombiverkauf in StÃ¼ck",
    "Verkaufte Finanzreserven Kombiverkauf in EUR",
    "Verkaufte Finanzreserven Einzelverkauf in StÃ¼ck",
    "Verkaufte Finanzreserven Einzelverkauf in EUR"
FROM [lib://manuell (vnppbw1wt201_qsadmin)/Master_Datei.xlsx]
(ooxml, embedded labels, table is Auszahlungsstatistik_Einzel_Mit);

*/










//Für Zinsausläufe mit KTO.STM.Hist.Stammdaten über Kontonummer verknüpft

/*

[KTO.BDV.Bestand.Darlehen.mit.Vertragsdaten]:
LOAD

	
	Kontonummer as KTO.STM.BDV.Kontonummer,
    Personennummer as KTO.BDV.Personennummer,
    Kurzname as KTO.BDV.Kurzname,
    Kundenberater as KTO.BDV.Kundenberater,
    "Kundenberater Name" as KTO.BDV.Kundenberater.Name,
    Kontonummer  as KTO.BDV.Kontonummer ,
    Geschäftsart as KTO.BDV.Geschäftsart,
    Produkt as KTO.BDV.Produkt,
    "Bezeichnung - Produkt" as KTO.BDV.Bezeichnung.Produkt,
    Kontoeröffnung as KTO.BDV.Kontoeröffnung,
    "Vertrag fällig am" as KTO.BDV.Vertrag.fällig.am,
    Darlehensart as KTO.BDV.Darlehensart,
    Kreditverwendung as KTO.BDV.Kreditverwendung,
    Verbraucherdarlehen as KTO.BDV.Verbraucherdarlehen,
    Verbraucherart as KTO.BDV.Verbraucherart,
    Verwendungszweck as KTO.BDV.Verwendungszweck,
    Anz.Ratenaussetzungen as KTO.BDV.Anz.Ratenaussetzungen,
    Vertragsabrechnung as KTO.BDV.Vertragsabrechnung,
    Zinsvereinbarung as KTO.BDV.Zinsvereinbarung,
    Zinssatz as KTO.BDV.Zinssatz,
    Festzinsbeginn as KTO.BDV.Festzinsbeginn,
    Festzinsende as KTO.BDV.Festzinsende,
    date(date#(Festzinsende,'YYYYMMDD'),'DD.MM.YYYY') as KTO.BDV.Festzinsende.DD.MM.YYYY.#,
    Ursprungsdarlehen as KTO.BDV.Ursprungsdarlehen,
    Kapitalsaldo as KTO.BDV.Kapitalsaldo,
    "Offene Kreditzusage" as KTO.BDV.Offene.Kreditzusage,
    "Zusageende - Vertragsdaten (NUM)" as KTO.BDV.Zusageende.Vertragsdaten.NUM,
    Annuitätsanpassung as KTO.BDV.Annuitätsanpassung,
    "Rate - Tilgung" as KTO.BDV.Rate.Tilgung,
    "am -Tilgung" as KTO.BDV.am.Tilgung,
    "am -Tilgung (NUM)" as KTO.BDV.am.Tilgung.NUM,
    "Geänderte Rate" as KTO.BDV.Geänderte.Rate,
    "Geänderte Rate ab - Tilgung" as KTO.BDV.Geänderte.Rate.ab.Tilgung,
    "Geänderte Rate ab - Tilgung (NUM)" as KTO.BDV.Geänderte.Rate.ab.Tilgung.NUM,
    "Schufameldung Text"  as KTO.BDV.Schufameldung.Text
FROM [lib://Validierung (vnppbw1wt201_qsadmin)/Bestand Darlehen mit Vertragsdaten T12_22_56.xlsx]
(ooxml, embedded labels, table is Seite1);

*/


[IND.SmartFinanz.Bestand.und.Provision]:
LOAD
//  	AutoNumberHash256(
// //     //Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999'), 
//     num(KUNDENSTAMMNUMMER_VRL),   
//     year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
//     as ANH##VKN.SmartFinanz#Join,
    
    
    
//     AutoNumberHash256(
// //     //Applymap('Map.Geno.User.ID.Berater', MITARBEITER_GENO_ID, '-9999999999'), 
//     Applymap('Map.KundeHTausVKN.SmartFinanz',num(KUNDENSTAMMNUMMER_VRL),'-9999999999'),   
//     year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
//     month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY'))) 
//         as ANH#Personennummer#Join,



     AutoNumberHash256(
     if(num(KUNDENSTAMMNUMMER_VRL)=0 or isnull(KUNDENSTAMMNUMMER_VRL),'9876543210',
     	Applymap('Map.KundeHTausVKN.SmartFinanz.AKT',num(KUNDENSTAMMNUMMER_VRL),     
     	Applymap('Map.KundeHTausVKN.SmartFinanz',num(KUNDENSTAMMNUMMER_VRL),'9876543210'))),
	 		year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')), 
     		month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')))
     			as ANH#Personennummer#Join,


    date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY') as IND.SMF.BUP.ABRECHNUNGSDATUM,
    
    year(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SMF.BUP.ABRECHNUNGSDATUM.Jahr,
    month(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SMF.BUP.ABRECHNUNGSDATUM.Monat,
    MonthEnd(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SMF.BUP.ABRECHNUNGSDATUM.Monthend,
    YearEnd(date(alt(ABRECHNUNGSDATUM,Date#(ABRECHNUNGSDATUM,'YYYY-MM-DD'),Date#(ABRECHNUNGSDATUM,'MM-DD-YYYY'),Date#(ABRECHNUNGSDATUM,'DD/MM/YYYY'),Date#(ABRECHNUNGSDATUM,'MM/DD/YYYY')),'DD.MM.YYYY')) as IND.SMF.BUP.ABRECHNUNGSDATUM.Yearend,
    
    AutoNumberHash256(ANTRAGSNUMMER_NUTZER_ID) as IND.SMF.BUP.ANTRAGSNUMMER.NUTZER.ID,
    num(KUNDENSTAMMNUMMER_VRL) as IND.SMF.BUP.KUNDENSTAMMNUMMER.VRL,
    AutoNumberHash256(KONTONUMMER_VRL) as IND.SMF.BUP.KONTONUMMER.VRL,
    BASIS_PROVISION as IND.SMF.BUP.BASIS.PROVISION,
    PROV_BESTAND as IND.SMF.BUP.PROV.BESTAND,
    PROV_SCHUTZBRIEF as IND.SMF.BUP.PROV.SCHUTZBRIEF,
    STORNOPROVISION_GESAMT as IND.SMF.BUP.STORNOPROVISION.GESAMT,
    PROVISION_GESAMT as IND.SMF.BUP.PROVISION.GESAMT,
    AutoNumberHash256(KONTONUMMER) as IND.SMF.BUP.KONTONUMMER
FROM [lib://QVD (vnppbw1wt201_qsadmin)/_Processed_Data/IND_SmartFinanz.qvd]
(qvd);




